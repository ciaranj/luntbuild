<?xml version="1.0"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
  "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
  <!ENTITY installation-chapter SYSTEM "../installguide/install-chapter.docbook">
  <!ENTITY database-chapter SYSTEM "../installguide/database-chapter.docbook">
  <!ENTITY ldap-chapter SYSTEM "../installguide/ldap-chapter.docbook">
  <!ENTITY login-chapter SYSTEM "login-chapter.docbook">
  <!ENTITY homepage-chapter SYSTEM "homepage-chapter.docbook">
  <!ENTITY createproject-chapter SYSTEM "createproject-chapter.docbook">
  <!ENTITY cvsadaptor-section SYSTEM "cvsadaptor-section.docbook">
  <!ENTITY cvsmodule-section SYSTEM "cvsmodule-section.docbook">
  <!ENTITY antbuilder-section SYSTEM "antbuilder-section.docbook">
  <!ENTITY editschedule-section SYSTEM "editschedule-section.docbook">
  <!ENTITY builds-chapter SYSTEM "builds-chapter.docbook">
]>

<book>
<bookinfo>
  <title>Luntbuild - Build Automation and Management User's Guide</title>
  <copyright><year>2005-2006</year><holder>Luntbuild</holder></copyright>
</bookinfo>
<chapter id="introduction">
<title>Introduction</title>

<para>
    Luntbuild is a build automation and management tool based on the popular
    <ulink url="http://ant.apache.org"><citetitle>Apache Ant</citetitle></ulink>.
    With Luntbuild, daily builds and continuous integration builds
    can be set easily. Refer to the following articles for benefits of daily builds and
    continuous integration builds, if you are not familiar with them:
</para>
<itemizedlist>
   <listitem>
    <para><ulink url="http://www.martinfowler.com/articles/continuousIntegration.html">
   <citetitle>Continuous Integration</citetitle>
   </ulink></para>
   </listitem>
   <listitem>
   <para><ulink url="http://www.joelonsoftware.com/articles/fog0000000023.html">
   <citetitle>Daily Builds Are Your Friend</citetitle>
   </ulink></para>
   </listitem>
</itemizedlist>
<para>While Luntbuild team would appreciate if you choose Luntbuild as your tool of choice for your
    continuous integration process, we realize, there are more tools available, and it is up to you
    to make the decision, which tool to use. Very nice comparison of continuous integration tools is available in
    <ulink url="http://damagecontrol.codehaus.org/Continuous+Integration+Server+Feature+Matrix">
        <emphasis>Continuous Integration Server Feature Matrix.</emphasis>
    </ulink>
</para>
<para>
    You can explore Luntbuild's functionality by viewing
    <ulink url="http://luntbuild.javaforge.com/luntbuild-demo.html"><emphasis>tutorial</emphasis>
    </ulink> movie. You can also check for Luntbuild <ulink url="../faq/index.html">FAQ</ulink>
    to learn more about Luntbuild.
</para>
<para>Basic unit of work in Luntbuild is a <emphasis>build</emphasis>. Build execution is triggered either by a schedule or
    it can be started manually. A build in Luntbuild performs following steps:</para>
<orderedlist numeration="arabic">
    <listitem><para>Checks out source code from the Version Control System(s) (VCS).</para></listitem>
    <listitem><para>Labels the current source code based on the current build version.</para></listitem>
    <listitem><para>Runs an Ant/Maven/Command/Rake build script in the source tree.</para></listitem>
    <listitem><para>Runs an Ant/Maven/Command/Rake post build script in the source tree.</para></listitem>
    <listitem><para>Publishes the build log and other build artifacts.</para></listitem>
</orderedlist>
<para>
    Build configuration, monitoring, and access to the build artifacts are all done using an intuitive web interface.
    Your development and testing team will have a central area to access the build information.
</para>
</chapter>

&installation-chapter;

&database-chapter;

&ldap-chapter;

&login-chapter;

&homepage-chapter;

<chapter id="properties">
<title>Setting General Luntbuild Properties</title>
<para>
   Properties listed in this tab are applied to all projects in Luntbuild.
   General Luntbuild Properties are explained in detail here:
   <variablelist>
        <varlistentry>
        <term>Url for luntbuild servlet</term>
        <listitem><para>
          The servlet url should be specified correctly here so it can be
          used in email notification and for Hessian remoting (for example used in Luntclipse).
          Normally this value should be
          http://&lt;server&gt;:&lt;port&gt;/luntbuild/app.do, where &lt;server&gt; is your
          build server name or ip address, and &lt;port&gt; is the port number
          you use to access Luntbuild. If this property is left empty, Luntbuild will
          use default value http://&lt;server_ip&gt;:8080/luntbuild/app.do, where &lt;server_ip&gt;
          is the actual ip address of the build server.
        </para>
        <warning>
            <para>
                It is imperative to set the servlet Url properly. Otherwise Email notification and
                remote connection to Luntbuild will not work properly.
            </para>
        </warning>
        </listitem>
        </varlistentry>
        <varlistentry>
        <term>Work directory</term>
        <listitem><para>
            You can optionally specify Luntbuild work directory.
            Work directory is the directory, where Luntbuild checks out artifacts
            from the version control system and performs a build.
            If not specified, Luntbuild uses the <emphasis>work</emphasis> sub-directory of Luntbuild
            installation directory. When a particular build schedule for given project is executed it creates
            a sub-directory in the Luntbuild <emphasis>work</emphasis> directory in the form
            <emphasis>work</emphasis>/&lt;project-name&gt;.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term id="publishdir">Publish directory</term>
        <listitem><para>
            You can optionally specify Luntbuild publish directory.
            Publish directory is the directory, where Luntbuild publishes the output of the build process
            like the build log, and other build artifacts.
            If not specified, Luntbuild uses the <emphasis>publish</emphasis> sub-directory of Luntbuild
            installation directory. When a particular build schedule for given project is executed it creates
            a sub-directory in the Luntbuild <emphasis>publish</emphasis> directory in the form
            <emphasis>publish</emphasis>/&lt;project-name&gt;/&lt;schedule-name&gt;/&lt;build-version&gt;.
            For example, you top level publish directory might be a directory under <emphasis>htdocs</emphasis>
            directory of your Apache web server.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Page refresh interval</term>
        <listitem><para>
        You can optionally specify a page refresh interval in seconds. If left empty, the default value will be 15 seconds.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>SMTP host</term>
        <listitem><para>
            You can optionally specify the SMTP mail host Luntbuild can use to send email notification.
            If this property is not specified, Luntbuild will use localhost as the default value.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>SMTP user</term>
        <listitem><para>
            This property is optional. If the SMTP host needs authentication, you should provide the user name here.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>SMTP password</term>
        <listitem><para>
            This property is optional. If the SMTP host needs authentication, you should provide the password here.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Luntbuild Jabber account</term>
        <listitem><para>
            Set the Jabber related properties here if you want to notify user by Jabber.
            Luntbuild need a Jabber account in order to send out build notification messages.
            </para><para><note><para>Connecting through proxy is not currently supported.</para></note></para>
            <para><note><para>
            This account needs to be different from your user's Jabber accounts.
            Keep this account logged off, and let your user login to his Jabber account using Gaim or
            any other IM client supporting Jabber.
            </para></note>
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Jabber server</term>
        <listitem><para>
            You can optionally specify the Jabber host used by Luntbuild to send Jabber messages. If this property is not specified, Luntbuild will use localhost as the default value.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Jabber server type</term>
        <listitem><para>
        You can optionally specify the type of Jabber server Luntbuild will communicate with. Valid entries are NORMAL, SSL, and GOOGLE.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Jabber server port</term>
        <listitem><para>
        The Jabber server port to connect to; default is 5222.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Jabber user</term>
        <listitem><para>
        The Jabber account name to be used for Luntbuild to login and send messages.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Jabber password</term>
        <listitem><para>
        The Jabber account password to login.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Luntbuild MSN account</term>
        <listitem><para>
            Set MSN Messenger related properties here if you want to notify user through MSN Messenger.
            Luntbuild needs a MSN Messenger account in order to send out build notification messages.
            For example <emphasis>luntbuild@hotmail.com</emphasis>.
            </para><note><para>
            This account needs to be different from your user's MSN accounts.
            You also have to add the Luntbuild MSN account to your user's account(s) in order
            the user to get MSN messages. If Luntbuild MSN Account is <emphasis>luntbuild@hotmail.com</emphasis>,
            and your user account is <emphasis>your-user@msn.com</emphasis>, you have to add <emphasis>luntbuild@hotmail.com</emphasis>
            to the contacts of <emphasis>your-user@msn.com</emphasis>. Then keep the account <emphasis>luntbuild@hotmail.com</emphasis>
            logged off, and let your user login to <emphasis>your-user@msn.com</emphasis> using MSN Messanger, Gaim or
            any other IM client supporting MSN.
            </para></note>
            <para>
            <note><para>Connecting through proxy is not currently supported.</para></note>
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Luntbuild MSN password</term>
        <listitem><para>
            Password for the above MSN account.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Sametime Server</term>
        <listitem><para>
            You can optionally specify the Sametime host used by Luntbuild to send Sametime messages.
            If this property is not specified, Luntbuild will use localhost as the default value.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Sametime User</term>
        <listitem><para>
            The Sametime account name to be used for Luntbuild to login and send messages.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Sametime Password</term>
        <listitem><para>
            The Sametime account password to login.
        </para></listitem>
        </varlistentry>
   </variablelist>
</para>

</chapter>

<chapter id="adduser">
<title>Adding Luntbuild Users</title>
<para>
    Before you start using Luntbuild in a team with multiple members, or even if you are the only one
    using Luntbuild, it is good idea to create Luntbuild user(s) and give them appropriate privileges.
    Users will be notified of a build status and they will be authorized to access different parts
    of Luntbuild.
</para>
<para>
    To create a Luntbuild user, click on the Users tab, and on the "new" icon, and following page will display:
    <screenshot>
    <screeninfo>New User</screeninfo>
    <mediaobject>
        <imageobject><imagedata fileref="images/newuser.jpg" format="JPG" /> </imageobject>
    <textobject> <phrase>New User</phrase> </textobject>
    </mediaobject>
    </screenshot>
</para>
<para>
Fill the following information:
</para>
   <variablelist>
        <varlistentry>
        <term>Name</term>
        <listitem><para>
            Provides a unique name to identify this user. This property is used for presentation and login.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Full name</term>
        <listitem><para>
            Full user name.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Can create project?</term>
        <listitem><para>
            Check this checkbox to give the rights to this user to create new project.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Password</term>
        <listitem><para>
            Provide an initial password (can be changed later by the user).
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Jabber account</term>
        <listitem><para>
            JabberID for this user, for example "johndoe@jabber.org". See
            <ulink url="http://www.jabber.org/about/overview.shtml"><citetitle>jabber.org</citetitle></ulink>
            for details about Jabber.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Email</term>
        <listitem><para>
            Email address for this user.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>MSN account</term>
        <listitem><para>
            The MSN Messenger account for this user, for example "foobar@hotmail.com".
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Sametime account</term>
        <listitem><para>
            The Sametime account for this user, for example "foobar".
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Blog Type</term>
        <listitem><para>
            Specify Blog Type. Supported blog types are: blogger or livejournal or metaweblog.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Blog URL</term>
        <listitem><para>
            Specify full URL for your blog. For example http://www.blogger.com/api for blogger type,
            http://jroller.com/xmlrpc for metaweblog type, and http://www.livejournal.com/interface/xmlrpc
            for livejournal type.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Blog User</term>
        <listitem><para>
            Blog User to use to access your blog.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Blog Password</term>
        <listitem><para>
            Blog Password to use to access your blog.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Blog ID</term>
        <listitem><para>
            Specify ID for your blog. Only used for blogger type.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Blog Category</term>
        <listitem><para>
            Blog Category to use to send the blog (comma separated list). Only used for metaweblog type.
        </para></listitem>
        </varlistentry>
   </variablelist>
   <para>
    All Luntbuild notifiers use templates based on
    <ulink url="http://jakarta.apache.org/velocity/">Velocity</ulink>
    for configuration of the notification messages. There are
    two types of notification messages in Luntbuild. Schedule notification message, is schedule error/failure
    message, when schedule fails to execute. Build notification message is sent at the end of the
    build execution. The templates are located in following directories in the Luntbuild installation
    directory:
    <simplelist>
        <member>templates/blog</member>
        <member>templates/email</member>
        <member>templates/jabber</member>
        <member>templates/msn</member>
        <member>templates/sametime</member>
    </simplelist>
    </para>
    <para>
    Each directory contains file properties file <emphasis>set-template.txt</emphasis> that contains
    the templates to be used for build notifier and schedule notifier, for example:
    <simplelist>
        <member>buildTemplate=simple-build.vm</member>
        <member>scheduleTemplate=simple-schedule.vm</member>
    </simplelist>
    </para>
    <para>
    Build templates support following variables:
    <simplelist>
        <member><emphasis>luntbuild_webroot</emphasis> - Luntbuild root url</member>
        <member><emphasis>build_project</emphasis> - name of the project</member>
        <member><emphasis>build_project_desc</emphasis> - description of the project</member>
        <member><emphasis>build_schedule</emphasis> - schedule name</member>
        <member><emphasis>build_schedule_desc</emphasis> - schedule description</member>
        <member><emphasis>build_schedule_url</emphasis> - schedule url</member>
        <member><emphasis>build_schedule_status</emphasis> - schedule status (failed, success)</member>
        <member><emphasis>build_schedule_status_date</emphasis> - schedule status date</member>
        <member><emphasis>build_url</emphasis> - build url</member>
        <member><emphasis>build_version</emphasis> - build version</member>
        <member><emphasis>build_status</emphasis> - build status (failed, success)</member>
        <member><emphasis>build_isSuccess</emphasis> - true if build status is success</member>
        <member><emphasis>build_isFailure</emphasis> - true if build status is failed</member>
        <member><emphasis>build_start</emphasis> - build start date</member>
        <member><emphasis>build_end</emphasis> - build end date</member>
        <member><emphasis>build_duration</emphasis> - build duration in seconds</member>
        <member><emphasis>build_artifactsdir</emphasis> - build artifacts directory</member>
        <member><emphasis>build_publishdir</emphasis> - build publish directory</member>
        <member><emphasis>build_revisionlog_url</emphasis> - revision log url (Html)</member>
        <member><emphasis>build_revisionlog_text</emphasis> - revision log text (contents)</member>
        <member><emphasis>build_buildlog_url</emphasis> - build log url (Html)</member>
        <member><emphasis>build_buildlog_text</emphasis> - build log text (contents)</member>
        <member><emphasis>luntbuild_systemlog_url</emphasis> - system log url (Html)</member>
        <member><emphasis>build_junit_reportdir</emphasis> - JUnit report directory</member>
        <member><emphasis>build_type</emphasis> - build type (clean, increment)</member>
        <member><emphasis>build_labelstrategy</emphasis> - build label strategy</member>
        <member><emphasis>build_randomquote</emphasis> - random quote from quotes.txt file</member>
    </simplelist>
    </para>
    <para>
    Schedule templates support following variables:
    <simplelist>
        <member><emphasis>luntbuild_webroot</emphasis> - Luntbuild root url</member>
        <member><emphasis>schedule_project</emphasis> - name of the project</member>
        <member><emphasis>schedule_project_desc</emphasis> - description of the project</member>
        <member><emphasis>schedule_name</emphasis> - name of the schedule</member>
        <member><emphasis>schedule_desc</emphasis> - description of the schedule</member>
        <member><emphasis>schedule_url</emphasis> - schedule url</member>
        <member><emphasis>schedule_status</emphasis> - schedule status (failed, success)</member>
        <member><emphasis>schedule_status_date</emphasis> - schedule status date</member>
        <member><emphasis>schedule_publishdir</emphasis> - schedule publish directory</member>
        <member><emphasis>luntbuild_systemlog_url</emphasis> - system log url (Html)</member>
        <member><emphasis>schedule_type</emphasis> - build type (clean, increment)</member>
        <member><emphasis>schedule_labelstrategy</emphasis> - build label strategy</member>
    </simplelist>
    </para>
    <para>
    Both templates also support OGNL expressions for Build or Schedule class, for example
    "version" for build template or "buildNecessaryCondition" for schedule template.
    </para>
    <para>
    <note>
        <para>Msn and Sametime notifiers do not support Html format, only text format.</para>
    </note>
   </para>
    <para>
    <note>
        <para>If you have problem with html format notification for Blog, Email, or Jabber notifier,
            you can use text only format. Just use files <emphasis>*-text.vm</emphasis> templates
            in <emphasis>set-template.txt</emphasis> properties file.</para>
    </note>
   </para>
   <para>
    New template for The Visual Studio is available in template <emphasis>vs-build.vm</emphasis>.
    The Visual Studio output scraper may be used to provide more detailed information regarding a Visual Studio build.
    To enable the scraper, make sure the command line used to trigger the build is visible in the build log.
    The scraper looks for a regular expression pattern containing the name of a .sln file followed
    by the “\build config” parameter.  If a match is found, the following variables are available to Velocity templates:
    <simplelist>
        <member><emphasis>vs_build_solutions</emphasis>a List of MSVSSolution objects.  This list is empty if no build command line was matched.</member>
    </simplelist>
   </para>
   <para>
    MSVSSolution contains the following properties:
    <simplelist>
        <member><emphasis>Path</emphasis> – the path of the sln file.</member>
        <member><emphasis>Name</emphasis> – the name of the sln file.</member>
        <member><emphasis>Configuration</emphasis> – the configuration used for the build.</member>
        <member><emphasis>Succeeded</emphasis> – the number of projects successfully built.</member>
        <member><emphasis>Failed</emphasis> – the number of projects that failed to build.</member>
        <member><emphasis>Skipped</emphasis> – the number of projects skipped.</member>
        <member><emphasis>Projects</emphasis> – a List containing MSVSProject objects:</member>
   </simplelist>
   </para>
   <para>
    MSVSProject contains the following properties:
    <simplelist>
        <member><emphasis>Name</emphasis> – the name of the vcproj file.</member>
        <member><emphasis>Errors</emphasis> – the number of errors in the project build.</member>
        <member><emphasis>Warnings</emphasis> – the number of warnings in the project build.</member>
    </simplelist>
   </para>
   <para>
    This is a snippet of a sample template:
<programlisting>
  #foreach($solution in $build_vs_solutions)
    &lt;tr&gt;
      &lt;td&gt;$solution.Name&lt;/td&gt;
      &lt;td&gt;$solution.Configuration&lt;/td&gt;
    &lt;/tr&gt;
    #foreach($project in $solution.Projects)
      &lt;tr&gt;
        &lt;td&gt;$project.Name&lt;/td&gt;
        &lt;td&gt;$project.Error errors&lt;/td&gt;
        &lt;td&gt;$project.Warning warnings&lt;/td&gt;
      &lt;/tr&gt;
    #end
    &lt;tr&gt;
      &lt;td&gt;$solution.Succeeded succeeded&lt;/td&gt;
      &lt;td&gt;$solution.Failed failed&lt;/td&gt;
      &lt;td&gt;$solution.Skipped skipped&lt;/td&gt;
    &lt;/tr&gt;
  #end
</programlisting>
   </para>
</chapter>

&createproject-chapter;

<chapter id="vcsadaptor">
<title>Creating Version Control System (VCS) Adaptor for the Project</title>
<para>
<itemizedlist>
<listitem><para>Select VCS Adaptors tab.</para></listitem>
<listitem><para>Click on New VCS Adaptor icon in the upper right corner of the tab's frame.</para></listitem>
<listitem><para>Select Version Control System.</para></listitem>
</itemizedlist>
</para>
<section><title>Setting AccuRev connection information.</title>
<para>
	To download AccuRev go to <ulink url="http://www.accurev.com/download/index.htm">
	http://www.accurev.com/download/index.htm</ulink>.
	Here is the list of properties for this adaptor:
    <variablelist>
        <varlistentry>
        <term>AccuRev port</term>
        <listitem><para>
        The AccuRev port in the format of &lt;servername&gt;:&lt;port&gt;, where &lt;servername&gt; and &lt;port&gt;
        will be replaced by the actual AccuRev server name and the port number.
        This property is optional and overrides acclient.cnf values.
        </para><note><para>Default values for AccuRev needs to be defined in acclient.cnf and wspaces files.
        Please consult AccuRev User's Guide for details.</para></note>
        </listitem>
        </varlistentry>
		<varlistentry>
		<term>Accurev executable path</term>
		<listitem><para>
		The directory path, where your accurev executable file resides in.
		It should be specified here, if it does not exist in the system path.
		</para></listitem>
		</varlistentry>
        <varlistentry>
        <term>Quiet period</term>
        <listitem><para>
        Number of seconds the current VCS should be quiet (without checkins) before Luntbuild decides
        to check out the code of this VCS for a build. This is used to avoid checking out code
        in the middle of some other checkins. This property is optional.
        When left empty, quiet period will not be used before checking out code to build.
        </para></listitem>
        </varlistentry>
    </variablelist>
</para>
</section>
<section><title>Setting Base Clearcase connection information.</title>
<para>
	You should have Clearcase client installed on the build machine.
	Also you should make sure that the account running your application server or servlet container
 	is able to access your Clearcase server and that it can make snapshot views.
	Here is the list of properties for this adaptor:
    <variablelist>
        <varlistentry>
        <term>View stgloc name</term>
        <listitem><para>
        Name of the Clearcase server-side view storage location which will be used as-stgloc option
        when creating Clearcase view for the current project. Either this property or "Explicit path for view storage"
        property should be specified.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>View storage path</term>
        <listitem><para>
        Explicit path for view storage. This property is required only when the "Clearcase view stgloc name" property is empty.
        If specified, it will be used as -vws option instead of using the -stgloc option to create Clearcase view
        for the current project.
        </para>
        <note><para>
            This value should be a writable UNC path on Windows platform.
        </para></note>
        </listitem>
        </varlistentry>
        <varlistentry>
        <term>Config spec</term>
        <listitem><para>
        Config spec used by Luntbuild to create Clearcase snapshot view for a build.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Modification detection config</term>
        <listitem><para>
        This property will take effect if there are some LATEST versions from some branch
        to fetch in the above config spec. It is used by Luntbuild to determine, if there are
        any changes in the repository since the last build. This property consists of multiple entries,
        where each entry is of the format &quot;&lt;path&gt;[:&lt;branch&gt;]&quot;.
        &lt;path&gt; is a path inside a VOB, which should be visible by the above config spec.
        Luntbuild will lookup any changes in any branch inside this path recursively,
        or it will lookup changes in the specified branch, if &lt;branch&gt; is specified.
        Multiple entries are separated by ";" or line terminator.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Options for snapshot view</term>
        <listitem><para>
        You may optionally specify extra options for the cleartool mkview sub command
        used by Luntbuild to create related Clearcase snapshot view for the current project.
        Options that can be specified here are restricted to -tmode, -ptime, and -cachesize.
        For example you can specify "-tmode insert_cr" to use Windows end of line text mode.
        </para></listitem>
        </varlistentry>
		<varlistentry>
		<term>Cleartool executable path</term>
		<listitem><para>
		The directory path, where your cleartool executable file resides in.
		It should be specified here, if it does not exist in the system path.
		</para></listitem>
		</varlistentry>
        <varlistentry>
        <term>Quiet period</term>
        <listitem><para>
        Number of seconds the current VCS should be quiet (without checkins) before Luntbuild decides
        to check out the code of this VCS for a build. This is used to avoid checking out code
        in the middle of some other checkins. This property is optional.
        When left empty, quiet period will not be used before checking out code to build.
        </para></listitem>
        </varlistentry>
    </variablelist>
</para>
</section>

&cvsadaptor-section;

<section><title>Setting File system connection information.</title>
<para>
    <variablelist>
        <varlistentry>
        <term>Source directory</term>
        <listitem><para>
        This is an optional property. If specified, changes can be detected in the source directory based
        on modification time, and modified files under this directory will be copied to the project
        work directory to perform build.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Quiet period</term>
        <listitem><para>
        Number of seconds the current VCS should be quiet (without checkins) before Luntbuild decides
        to check out the code of this VCS for a build. This is used to avoid checking out code
        in the middle of some other checkins. This property is optional.
        When left empty, quiet period will not be used before checking out code to build.
        </para></listitem>
        </varlistentry>
    </variablelist>
</para>
</section>
<section><title>Setting Perforce connection information.</title>
<para>
	You should have Perforce client installed on the build machine.
	Contact <ulink url="http://www.perforce.com">http://www.perforce.com</ulink> for licensing information.
	Here is the list of properties for this adaptor:
    <variablelist>
        <varlistentry>
        <term>Perforce port</term>
        <listitem><para>
        The Perforce port in the format of &lt;port&gt;, or &lt;servername&gt;:&lt;port&gt;,
        where &lt;servername&gt; and &lt;port&gt; will be replaced by the actual Perforce server name and the port number.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>User name</term>
        <listitem><para>
        User name to access the above Perforce server. This user should have the rights to create and edit client
        specifications and to checkout and label code.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Password</term>
        <listitem><para>
        Password for the above user. Can be blank, if your Perforce server does not use password based security.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Line end</term>
        <listitem><para>
        Set line ending character(s) for client text files. The following values are possible:
		<simplelist>
		<member>local: use mode native to the client</member>
		<member>unix: UNIX style</member>
		<member>mac: Macintosh style</member>
		<member>win: Windows style</member>
		<member>share: writes UNIX style but reads UNIX, Mac or Windows style</member>
		</simplelist>
        </para>
        <para>
		This property is optional. If not specified, the value will default to "local".
        </para></listitem>
        </varlistentry>
		<varlistentry>
		<term>P4 executable path</term>
		<listitem><para>
		The directory path, where your p4 executable file resides in.
		It should be specified here, if it does not exist in the system path.
		</para></listitem>
		</varlistentry>
        <varlistentry>
        <term>Quiet period</term>
        <listitem><para>
        Number of seconds the current VCS should be quiet (without checkins) before Luntbuild decides
        to check out the code of this VCS for a build. This is used to avoid checking out code
        in the middle of some other checkins. This property is optional.
        When left empty, quiet period will not be used before checking out code to build.
        </para></listitem>
        </varlistentry>
    </variablelist>
</para>
</section>
<section><title>Setting Subversion connection information.</title>
<para>
	In order to use this adaptor, Subversion client software should be installed on your build machine.
	You can download subversion from <ulink url="http://subversion.tigris.org/">http://subversion.tigris.org</ulink>.
</para>
    <note><para>
	Please keep time of the build server machine in sync with the Subversion server machine
	to allow build server to detect repository changes in Subversion server more accurately.
	</para></note>
<para>
	Here is the list of properties for this adaptor:
    <variablelist>
        <varlistentry>
        <term>Repository url base</term>
        <listitem><para>
        The base part of Subversion url, for example, you can enter "svn://buildmachine.foobar.com/",
        or "file:///c:/svn_repository", or "svn://buildmachine.foobar.com/myproject/othersubdirectory", etc.
        Other definitions such as tags directory, branches directory, or modules are relative to this base url.
        </para>
        <note><para>If you are using https:// schema, you should make sure that svn server certificate has been
        accepted permanently by your build machine.</para></note>
        </listitem>
        </varlistentry>
        <varlistentry>
        <term>Directory for trunk</term>
        <listitem><para>
        Directory used to hold trunk for this url base. This directory is relative to the url base.
        Leave it blank, if you didn't define any trunk directory in the above url base.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Directory for branches</term>
        <listitem><para>
        Directory used to hold branches for this url base. This directory is relative to the url base.
        If left blank, "branches" will be used as the default value.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Directory for tags</term>
        <listitem><para>
        Directory used to hold tags for this url base. This directory is relative to the url base.
        If left blank, "tags" will be used as the default value.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Username</term>
        <listitem><para>
        User name to use to login to Subversion.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Password</term>
        <listitem><para>
        Password to use to login to Subversion.
        </para></listitem>
        </varlistentry>
		<varlistentry>
		<term>Svn executable path</term>
		<listitem><para>
		The directory path, where your svn executable file resides in.
		It should be specified here, if it does not exist in the system path.
		</para></listitem>
		</varlistentry>
        <varlistentry>
        <term>Quiet period</term>
        <listitem><para>
        Number of seconds the current VCS should be quiet (without checkins) before Luntbuild decides
        to check out the code of this VCS for a build. This is used to avoid checking out code
        in the middle of some other checkins. This property is optional.
        When left empty, quiet period will not be used before checking out code to build.
        </para></listitem>
        </varlistentry>
    </variablelist>
</para>
</section>
<section><title>Setting Clearcase UCM connection information.</title>
<para>
	You should have Clearcase client installed on the build machine.
	Also you should make sure that the account running your application server or
 	servlet container is able to access your Clearcase server and that it can make snapshot views.
	Here is the list of properties for this adaptor:
    <variablelist>
        <varlistentry>
        <term>View stgloc name</term>
        <listitem><para>
        Name of the Clearcase view storage location, which will be used as -stgloc option when creating Clearcase
		view for this project.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Project VOB tag</term>
        <listitem><para>
        Tag for the project vob, for example: \pvob1.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>View storage path</term>
        <listitem><para>
        Explicit path for view storage.
        This property is required only when the "Clearcase view stgloc name" property is empty. If specified, it will be used
        as -vws option instead of -stgloc option when creating Clearcase view.
        This view will be created automatically by the luntbuild system.
        Just make sure there is no other view with this name.
        Example: \\mycomputer\cc_vws1\luntbuild-mymodule.vws
        </para>
		<note><para>This value should be a writable UNC path on Windows platform.</para></note>
        </listitem>
        </varlistentry>
        <varlistentry>
        <term>UCM stream name</term>
        <listitem><para>
        Name of the UCM stream.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>What to build</term>
        <listitem><para>
        Specifies baselines you want to build inside the stream. Multiple baselines are separated by space.
        The following values have particular meaning:
        <simplelist>
		<member>&lt;latest&gt;: means build with all the latest code from every component</member>
		<member>&lt;latest baselines&gt;: means build with all the latest baselines from every component</member>
		<member>&lt;recommended baselines&gt;: means build with all the recommended baselines</member>
		<member>&lt;foundation baselines&gt;: means build with all the foundation baselines</member>
		</simplelist>
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Config Spec</term>
        <listitem><para>
          Put your config spec in here. Add a load line after the config spec you use in your dynamic views
          for each directory you need, like this:
        <simplelist>
        <member>include \\server\ClearCase\configspecs\myconfigspec.txt</member>
        <member>load \myvob\modules\build</member>
        <member>load \myvob\modules\mymodule</member>
		</simplelist>
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Modification detection config</term>
        <listitem><para>
        This property will only take effect when the "What to build" property equals to "latest". It is used by Luntbuild
        to lookup if there are any changes in the repository since the last build. This property comprises of multiple entries
        with each entry in the format &quot;&lt;path&gt;:&lt;branch&gt;&quot;. &lt;path&gt; is a path inside a VOB,
        (but starting from the vob name, for example: \myvob\modules\mymodule:mymodule_dev_branch),
        which should be visible using the above config spec. Luntbuild will lookup any changes at any branch inside
        this path recursively, or it will lookup changes in the specified branch, if &lt;branch&gt; is specified.
        Multiple entries are separated by ";" or line terminator. Refer to the Clearcase User's Guide for details.
        </para>
		<note><para>If the branch is a subbranch, you don't need to specify the names of any
             "super"-branches, just the name of the actual branch is enough.
        </para></note>
        </listitem>
        </varlistentry>
        <varlistentry>
        <term>Options for snapshot view</term>
        <listitem><para>
        You may optionally specify extra options for the cleartool mkview sub command used by Luntbuild to create
        related clearcase snapshot view for the current project. Options that can be specified here are restricted
        to -tmode, -ptime, and -cachesize. For example you can specify "-tmode insert_cr" to use Windows end of line text mode.
        </para></listitem>
        </varlistentry>
		<varlistentry>
		<term>Cleartool executable path</term>
		<listitem><para>
		The directory path, where your cleartool executable file resides in.
		It should be specified here, if it does not exist in the system path.
		</para></listitem>
		</varlistentry>
        <varlistentry>
        <term>Quiet period</term>
        <listitem><para>
        Number of seconds the current VCS should be quiet (without checkins) before Luntbuild decides
        to check out the code of this VCS for a build. This is used to avoid checking out code
        in the middle of some other checkins. This property is optional.
        When left empty, quiet period will not be used before checking out code to build.
        </para></listitem>
        </varlistentry>
    </variablelist>
</para>
<note><para>
    The Clearcase UCM adaptor currently does not support labeling operation.
</para></note>
</section>
<section><title>Setting Visual Sourcesafe connection information.</title>
<para>
	In order to use this VCS adaptor, visual sourcesafe need to be installed in your build machine.
	Download Visual Sourcesafe from <ulink url="http://download.microsoft.com">http://download.microsoft.com</ulink>.
	The following list of properties needs to be configured:
    </para>
	<note><para>In order to keep history command of Visual Sourcesafe accurate, time setting of all developer workstations,
	and the build server should be kept in sync.</para></note>
    <para>
    <variablelist>
        <varlistentry>
        <term>Sourcesafe path</term>
        <listitem><para>
        The directory where your srcsafe.ini resides in. For example: \\machine1\directory1.
        You should use explicit hostname eg. "machine1", not the ip address of the "machine1",
        or you should specify ip address in the Sourcesafe path.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Username</term>
        <listitem><para>
        User name to use to login the above Sourcesafe database.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Password</term>
        <listitem><para>
        Password for the above user name.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Datetime format</term>
        <listitem><para>
        Specify the date/time format used for the Sourcesafe history command. This property is optional.
        If left empty, Luntbuild will use "M/dd/yy;h:mm:ssa" as the default value.
        The default value is suitable for English language operating systems using US locale.
        For other English speaking countries with different date format like UK, Australia, and Canada
        the Visual Sourcesafe Date format to use (assuming you're using the appropriate
        locale setup as Visual Sourcesafe honors the local locale settings) should be as follows:
        </para>
<para><emphasis>'d/M/yy;H:mm'</emphasis></para>
        <para>
        If Luntbuild is running on non-english operating systems,
        use the following method to determine the datetime format:
        </para>
			<para>
			Open Visual Sourcesafe <emphasis>installed on your build machine</emphasis>,
			select an existing VSS database and choose to view one of the projects with files in it.
			There should be a list of files shown with several fields including the &quot;Date-Time&quot; field.
			You should use the &quot;datetime format&quot; property from value specified in this field.
			For example, if one of the values of this field is &quot;04-07-18 20:19&quot;,
			the &quot;datetime format&quot; property should be &quot;yy-MM-dd;HH:mm&quot;.
			The <emphasis>semicolon</emphasis> between date and time format should be specified.
			You are encouraged to specify the property as &quot;yy-MM-dd;HH:mm:ss&quot; to add the accuracy.
			Take another example, if the value shown in Visual Sourcesafe is &quot;7/18/04 8:19p&quot;,
			the &quot;datetime format&quot; should be &quot;M/dd/yy;h:mma&quot;.
			Format &quot;M/dd/yy;h:mm:ssa&quot; would increase the accuracy in this case.
			</para>
            <para>
			The following is a list of format character meanings copied from JDK document:
			</para>
			<table>
			<title>Date/Time format characters</title>
			<tgroup cols="3">
			<thead>
			<row>
			<entry>Character</entry>
			<entry>Meaning</entry>
			<entry>Example</entry>
			</row>
			</thead>
			<tbody>
			<row><entry>y</entry><entry>Year</entry><entry>1996 ; 96</entry></row>
			<row><entry>M</entry><entry>Month in year</entry><entry>July ; Jul ; 07</entry></row>
			<row><entry>d</entry><entry>Day in month</entry><entry>10</entry></row>
			<row><entry>a</entry><entry>Am/pm marker</entry><entry>p</entry></row>
			<row><entry>H</entry><entry>Hour in day (0-23)</entry><entry>0</entry></row>
			<row><entry>h</entry><entry>Hour in am/pm (1-12)</entry><entry>12</entry></row>
			<row><entry>m</entry><entry>Minute in hour</entry><entry>30</entry></row>
			<row><entry>s</entry><entry>Second in minute</entry><entry>55</entry></row>
			</tbody>
			</tgroup>
			</table>
            <para>
			For details about the format string, please refer to
			<ulink url="http://java.sun.com/j2se/1.4.2/docs/api/java/text/SimpleDateFormat.html">
			http://java.sun.com/j2se/1.4.2/docs/api/java/text/SimpleDateFormat.html
			</ulink>
            </para>
            </listitem>
        </varlistentry>
        <varlistentry>
        <term>Ss.exe path</term>
        <listitem><para>
        The directory path, where your ss.exe file resides in.
        It should be specified here, if it does not exist in the system path.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Quiet period</term>
        <listitem><para>
        Number of seconds the current VCS should be quiet (without checkins) before Luntbuild decides
        to check out the code of this VCS for a build. This is used to avoid checking out code
        in the middle of some other checkins. This property is optional.
        When left empty, quiet period will not be used before checking out code to build.
        </para></listitem>
        </varlistentry>
    </variablelist>
    </para>
	<note><para>Make sure you are using English version of Visual Sourcesafe. If you must use other language version, please
	download source code of Luntbuild and modify below line of VssAdaptor.java:
	<programlisting>
    authorPattern = Pattern.compile("^User:(.*)Date:.*");
	</programlisting>
	You need to change the author pattern according to the HISTORY command output of your Sourcesafe installation.
 	</para></note>
</section>
<section><title>Setting StarTeam connection information.</title>
<para>
	For Windows platform, you will need to have a full installation of StarTeam SDK runtime
 	(which will install some runtime dlls	and put them in the Windows system path). Normally
 	this is the part of StarTeam client installation.
	Please go to <ulink url="http://www.borland.com">http://www.borland.com</ulink> for licensing information.
	Here is the list of properties for this adaptor:
    <variablelist>
        <varlistentry>
        <term>Project location</term>
        <listitem><para>
        Location of a StarTeam project is defined as: &lt;servername&gt;:&lt;portnum&gt;/&lt;projectname&gt;,
        where &lt;servername&gt; is the host where the StarTeam server runs,
        &lt;portnum&gt; is the port number the StarTeam server uses, default value is 49201.
        &lt;projectname&gt; is a StarTeam project under this StarTeam server.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>User</term>
        <listitem><para>
        User name to login to the StarTeam server.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Password</term>
        <listitem><para>
        Password to login to the StarTeam server.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Convert EOL?</term>
        <listitem><para>
        The following values are possible:
        </para>
		<para><emphasis>all:</emphasis> all ASCII files will have their end-of-line characters
		adjusted to the EOL type of the local machine on checkout</para>
		<para><emphasis>no:</emphasis> the files will be checked out with whatever EOL characters are used on the server</para>
        <para>
		This property is optional. If not specified, it will default to <emphasis>yes</emphasis>.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Quiet period</term>
        <listitem><para>
        Number of seconds the current VCS should be quiet (without checkins) before Luntbuild decides
        to check out the code of this VCS for a build. This is used to avoid checking out code
        in the middle of some other checkins. This property is optional.
        When left empty, quiet period will not be used before checking out code to build.
        </para></listitem>
        </varlistentry>
    </variablelist>
</para>
</section>
<section><title>Using multiple Version Control Adaptors.</title>
<para>
For each project, you can define one or more of the above Version Control Systems.
When a build is performed for such a project, contents of all repositories is checked out to the build's work directory.
For example, you may have a project with its client module in a Cvs repository, and the server module in a VSS repository.
This approach is also applicable for projects with modules in different repositories of the same VCS type.
For example, you may have a project with the client module in a Cvs repository, and the server module in
different Cvs repository.
</para>
</section>
</chapter>

<chapter id="vcsmodule">
<title>Creating VCS Module(s)</title>
<para>
Click on New Module icon in upper right corner of the Modules frame.
If you have multiple VCS modules defined, the retrieval process will start from the first module.
Following modules will override previous modules if the part of the modules overlaps.
For example, if you define module1 with destination path "/foo/bar",
and later you define another module with destination path "/foo",
the contents of module2 will override the contents of module1.
But if module1 is defined with destination path "/foo",
and module2 is defined with destination path "/foo/bar", only contents under directory "/foo/bar"
will be overridden by module2.
</para>
<section><title>Setting AccuRev module information.</title>
<para>
    <variablelist>
        <varlistentry>
        <term>Label</term>
        <listitem><para>
        The label is the transaction number to which to sync. Specify the transaction number you want to build at.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Depot</term>
        <listitem><para>
        The AccuRev depot to check the code out of.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Backing stream</term>
        <listitem><para>
        The backing stream for this build module.
        The backing stream should be able to have streams created from it by the build user.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Build stream</term>
        <listitem><para>
        The name of the stream to create from the backing stream. If it doesn't exist it will be created.
        A reference tree will be created from this stream with a '_reference' suffix appended to the build stream name.
        </para></listitem>
        </varlistentry>
    </variablelist>
</para>
</section>

&cvsmodule-section;

<section><title>Setting Perforce module information.</title>
    <variablelist>
        <varlistentry>
        <term>Depot path</term>
        <listitem><para>
        Specify the Perforce depot side path, such as "//depot/testperforce/...".
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Label</term>
        <listitem><para>
        Specify the label for the above depot path. This property is optional.
        When empty, the latest version (head) of the above depot path will be retrieved.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Client path</term>
        <listitem><para>
        Specify the client side path, such as "//myclient/testperforce/...".
        </para></listitem>
        </varlistentry>
    </variablelist>
    <para>
    <note><para>
        To exclude files or directories, create a separate module for each exclusion and precede
        the Depot path property with a minus (-) sign, as follows:
        <programlisting>
    Depot path:  -//depot.side
    Client path: //client.side
        </programlisting>
    </para></note>
    </para>
    <para>
	The module definition for Perforce maps a repository "Depot path" to "Client path".
	Luntbuild also supports Perforce "Label" property.
	"Depot path" represents a path in Perforce repository, such as "//depot/testperforce/...".
	"Client path" represents a client path (where the contents of the depot path is checked out),
	such as "//myclient/testperforce/...".
	"Label" is a Perforce label, used if you want to retrieve a particular snapshot of given "Depot path",
	or it can be left empty to retrieve the head version of "Depot path".
	The client path defined in "Client path" does not need to exist.
	Luntbuild will create the path if it does not exist.
	The user specified in Perforce connection information at the project level should
	have enough access rights to create and edit Perforce client specification.
    </para>
</section>
<section><title>Setting Subversion module information.</title>
    <variablelist>
        <varlistentry>
        <term>Source path</term>
        <listitem><para>
        Represents a path in the Subversion repository, for example "testsvn", "testsvn/web", or "/testsvn".
        When "branch" or "label" properties are defined, this path will be mapped to another path in the svn repository.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Branch</term>
        <listitem><para>
        Specify the branch for above source path. This property is optional. When left empty, trunk is assumed.
        </para>
		<note><para>
		Subversion does not internally has the notion of branch. Value specified here will be used by Luntbuild
		to do url mapping for the above source path so that actual effect is just like a branch in Cvs.
		</para></note>
        </listitem>
        </varlistentry>
        <varlistentry>
        <term>Label</term>
        <listitem><para>
        Specify the label for the above source path. This property is optional.
        If specified, it will take preference over branch. When left empty, head version
        of the specified branch is assumed.
        </para>
        <note><para>
        Subversion does not internally has the notion of label. Value specified here will be used
        by Luntbuild to do url mapping for the above source path so that actual effect is just like a tag in Cvs.
        </para></note>
        </listitem>
        </varlistentry>
        <varlistentry>
        <term>Destination path</term>
        <listitem><para>
        This property is optional. If specified, the contents from Subversion repository will be retrieved
        to the "destination path" relative to the project work directory. Otherwise the contents will be retrieved
        to "source path" (with no regard to "branch" or "label") relative to the project work directory.
        </para></listitem>
        </varlistentry>
    </variablelist>
    <para>
	"Source path" represents a path in the Svn repository, for example "testsvn", "testsvn/web", or "/testsvn".
	This path will be mapped to another path in the Svn repository based on other properties.
	In order to demonstrate this path mapping, we define following properties:
    </para>
	<simplelist>
	<member>Repository url base: svn://localhost</member>
	<member>Directory for trunk: trunk</member>
	<member>Directory for branches: branches</member>
	<member>Directory for tags: tags</member>
	</simplelist>
	<para>
	We will examine the following module settings and give them the url mapping:
    <variablelist>
        <varlistentry>
        <term>Trunk</term>
        <listitem><para>
        <simplelist>
            <member>Source path: testsvn/web</member>
            <member>Branch: &lt;empty&gt;</member>
            <member>Label: &lt;empty&gt;</member>
            <member>Destination path: &lt;empty&gt;</member>
        </simplelist>
        </para>
        <para>
        Luntbuild will check out code from url "svn://localhost/trunk/testsvn/web" to directory
        "&lt;project work directory&gt;/testsvn/web".
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Branches</term>
        <listitem><para>
        <simplelist>
            <member>Source path: testsvn/web</member>
            <member>Branch: simplified-chinese</member>
            <member>Label: &lt;empty&gt;</member>
            <member>Destination path: &lt;empty&gt;</member>
        </simplelist>
        </para>
        <para>
        Luntbuild will check out code from url "svn://localhost/branches/simplified-chinese/testsvn/web"
        to directory "&lt;project work directory&gt;/testsvn/web".
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Tags</term>
        <listitem><para>
        <simplelist>
            <member>Source path: testsvn/web</member>
            <member>Branch: &lt;empty&gt;</member>
            <member>Label: v1_0</member>
            <member>Destination path: &lt;empty&gt;</member>
        </simplelist>
        </para>
        <para>
        Luntbuild will check out code from url "svn://localhost/tags/v1_0/testsvn/web" to directory
        "&lt;project work directory&gt;/testsvn/web".
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Tags and path</term>
        <listitem><para>
        <simplelist>
            <member>Source path: testsvn/web</member>
            <member>Branch: simplified-chinese</member>
            <member>Label: v1_0</member>
            <member>Destination path: testsvn/web/simplified-chinese</member>
        </simplelist>
        </para>
        <para>
		Luntbuild will check out code from url "svn://localhost/tags/v1_0/testsvn/web" to directory
		"&lt;project work directory&gt;/testsvn/web/simplified-chinese".
		</para>
        <note><para>Branch definition is ignored here because label definition takes preference.</para></note>
        </listitem>
        </varlistentry>
    </variablelist>
    </para>
    <para>
	When Luntbuild tags a version for example "v1_0" for code checked out to directory
	"&lt;project work directory&gt;/testsvn/web", the following command will be issued:
	"svn copy &lt;project work directory&gt;/testsvn/web svn://localhost/tags/v1_0/testsvn/web"
	</para>
	<para>
	Of course you can avoid the above url mapping, by giving "Directory for trunk" property empty value,
	and giving "Branch" and "Label" properties both empty values. This way, you can control where to check out the code from,
	and where to put checked out code to, by just using the "Source path" and "Destination path" properties
	(in this case, source path will only be prefixed with "repository url base" property defined at the project level).
	</para>
</section>
<section><title>Setting Visual Sourcesafe module information.</title>
<para>
    <variablelist>
        <varlistentry>
        <term>Source path</term>
        <listitem><para>
        Specify the path in the VSS repository, for example: "testvss", or "/testvss".
        </para>
        <note><para>You should not add $ in front of this path, in order to specify the whole repository,
        you should just enter "/".</para></note>
        </listitem>
        </varlistentry>
        <varlistentry>
        <term>Label</term>
        <listitem><para>
        Specify the label for the above source path. This property is optional.
        If left empty, latest version is assumed.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Destination path</term>
        <listitem><para>
        Specify the destination directory relative to the project work directory, where the contents
        under the above source path should be retrieved to. This property is optional.
        If left empty, retrieved code will be put into directory defined by the source path, relative
        to the project work directory.
        </para></listitem>
        </varlistentry>
    </variablelist>
	"Source path" represents a project path relative to the root of Sourcesafe,
	for example "testvss", "/testvss", or "/testvss/web", etc.
	Path "/" or "\" can be used to retrieve the whole contents of the repository.
	"Label" stands for a VSS label. VSS implements branches by creating a new shared Sourcesafe projects.
	So you may need to configure different modules in order to get code from different branches.
	If "Label" is left empty, Luntbuild will get latest code for that module from VSS.
	If "Destination path" is defined, contents from Sourcesafe will be retrieved to
	"Destination path" relative to the project work directory.
	Otherwise the contents will be put to "Source path" relative to project work directory.
</para>
</section>
<section><title>Setting StarTeam module information.</title>
<para>
    <variablelist>
        <varlistentry>
        <term>StarTeam view</term>
        <listitem><para>
        Specify a StarTeam view. This property is optional. If it is left empty, the root view
        of the current StarTeam project will be used.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Source path</term>
        <listitem><para>
        Specify a path relative to the root of the above StarTeam view. Enter "/" to specify the root.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Label</term>
        <listitem><para>
        Specify the label for the above StarTeam view. This property is optional. When left empty,
        latest version of the specified view is assumed.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Destination path</term>
        <listitem><para>
        Specify the destination directory relative to the project work directory,
        where the contents under the above source path should be retrieved to.
        This property is optional. When left empty, retrieved code will be put into directory
        specified in source path, relative to the project work directory.
        </para></listitem>
        </varlistentry>
    </variablelist>
	"StarTeam view" stands for a StarTeam view, and "Label" stands for a label of this StarTeam view.
	If "StarTeam view" is left empty, the root StarTeam view will be used.
	"Source path" is a path relative to the root of the chosen StarTeam view.
	If "Destination path" is defined, the contents from StarTeam repository will be retrieved to
	the "Destination path" relative to the project work directory, otherwise the contents will be put
	to the "Source path" relative to the project work directory.
</para>
</section>
</chapter>

<chapter id="builders">
<title>Creating the Project Builder(s)</title>
<para>
	Builder(s) are responsible for executing a build for a particular schedule of the project.
</para>
<para>
	To create Builder(s), click on Builders tab, and click on New icon
    <inlinemediaobject>
        <imageobject><imagedata fileref="images/new.jpg" format="JPG" /> </imageobject>
    </inlinemediaobject>
	in the upper right corner of the tab's frame.
 	Builders editor tab will display.
</para>
<screenshot>
<screeninfo>Builders Editor Tab</screeninfo>
<mediaobject>
    <imageobject><imagedata fileref="images/builders-editor.jpg" format="JPG" /> </imageobject>
<textobject> <phrase>Builders Editor Tab</phrase> </textobject>
</mediaobject>
</screenshot>
<para>Select the appropriate Builder type. The following Builders are available:
<simplelist>
	<member>Ant Builder</member>
	<member>Command Builder</member>
	<member>Maven Builder</member>
	<member>Maven2 Builder</member>
	<member>Rake Builder</member>
</simplelist>
</para>
<para>
You can create as many builders as needed for different tasks for the given project. You will then
select particular builders and/or post-builders for each schedule of this project as appropriate from
the set of builders defined here.
</para>

&antbuilder-section;

<section><title>Configuring Command Builder.</title>
<para>
    <variablelist>
        <varlistentry>
        <term>Name</term>
        <listitem><para>
        Provide a name to identify this builder, this name can be changed later.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Build command</term>
        <listitem><para>
        Specify the build command. For example: /path/to/command.bat "${build.version}" "${build.artifactsDir}".
        String enclosed by ${...} will be interpreted as OGNL expression, and it will be evaluated before execution.
        Root object used for OGNL expression evaluation here is current <ulink url="../javadoc/com/luntsys/luntbuild/builders/Builder.html">Builder</ulink> object.
        </para>
        <note><para>A single argument containing spaces should be quoted in order not be interpreted as multiple arguments.</para></note>
        </listitem>
        </varlistentry>
        <varlistentry>
        <term>Run command in directory</term>
        <listitem><para>
        The directory path to run the build command in. If this path is not an absolute path,
        it is assumed to be relative to the project work directory.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Wait for process to finish before continuing?</term>
        <listitem><para>
        This property determines whether the build will wait
        for the command execution to complete before continuing.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Environment variables</term>
        <listitem><para>
        Environment variables to set before running this builder. For example:
		<code>MYAPP_HOME=${build.schedule.workingDir}</code>
		<code>SCHEDULE_NAME=${build.schedule.name}</code>
		You should specify one variable per line. OGNL expression can be inserted to form the value,
		provided they are enclosed by ${...}.
        Root object used for OGNL expression evaluation here is current <ulink url="../javadoc/com/luntsys/luntbuild/builders/Builder.html">Builder</ulink> object.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Build success condition</term>
        <listitem><para>
        The build success condition is an OGNL expression used to determine, if the build of the current project
        was successful. If left empty, the <emphasis>result==0</emphasis> value is assumed.
        Root object used for OGNL expression evaluation here is current <ulink url="../javadoc/com/luntsys/luntbuild/builders/Builder.html">Builder</ulink> object.
        </para></listitem>
        </varlistentry>
    </variablelist>
</para>
</section>
<section><title>Configuring Maven Builder.</title>
<para>
    <variablelist>
        <varlistentry>
        <term>Name</term>
        <listitem><para>
        Provide a name to identify this builder, this name can be changed later.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Command to run Maven</term>
        <listitem><para>
        Specify command to run Maven (normally path to maven.bat or maven shell script).
        For example: /path/to/maven.
        String enclosed by ${...} will be interpreted as OGNL expression, and it will be evaluated before execution.
        Root object used for OGNL expression evaluation here is current <ulink url="../javadoc/com/luntsys/luntbuild/builders/Builder.html">Builder</ulink> object.
        </para>
		<note><para>In order to use Luntbuild provided build version number in Maven, write your project.xml like the following:
<programlisting>
    <![CDATA[
    <project>
    ...
    <!--Use value of variable "buildVersion" as current version,
    this variable is defined in Luntbuild's Maven
    builder configuration page-->
    <currentVersion>${buildVersion}</currentVersion>
    ...
    </project>
    ]]>
</programlisting>
		</para></note>
        <note><para>Single argument containing spaces should be quoted in order not be interpreted as multiple arguments.</para></note>
        </listitem>
        </varlistentry>
        <varlistentry>
        <term>Directory to run Maven in</term>
        <listitem><para>
        Specify the directory to run Maven in. If this path is not an absolute path,
        it is assumed to be relative to the project work directory.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Goals to build</term>
        <listitem><para>
        Specify the goals to build. Use space to separate different goals (goal name containing spaces should be quoted
        in order not to be interpreted as multiple goals). You can also use ${...} to pass OGNL variables as the goal name.
        For example you can use ${build.schedule.name} to use different goals for different schedules.
        Root object used for OGNL expression evaluation here is current <ulink url="../javadoc/com/luntsys/luntbuild/builders/Builder.html">Builder</ulink> object.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Build properties</term>
        <listitem><para>
		Define build properties here to pass into the ant build script. For example:
        <simplelist>
        <member>buildVersion=${build.version}</member>
		<member>scheduleName=${build.schedule.name}</member>
        </simplelist>
        </para>
        <para>
		You should set one variable per line. OGNL expression can be used to form the value provided
		it is enclosed by ${...}.
        Root object used for OGNL expression evaluation here is current <ulink url="../javadoc/com/luntsys/luntbuild/builders/Builder.html">Builder</ulink> object.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Environment variables</term>
        <listitem><para>
        Environment variables to set before running this builder. For example:
		<code>MYAPP_HOME=${build.schedule.workingDir}</code>
		<code>SCHEDULE_NAME=${build.schedule.name}</code>
		You should specify one variable per line. OGNL expression can be inserted to form the value,
		provided they are enclosed by ${...}.
        Root object used for OGNL expression evaluation here is current <ulink url="../javadoc/com/luntsys/luntbuild/builders/Builder.html">Builder</ulink> object.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Build success condition</term>
        <listitem><para>
        The build success condition is an OGNL expression used to determine, if the build of the current project
        was successful (root object used for OGNL expression evaluation here is current <ulink url="../javadoc/com/luntsys/luntbuild/builders/Builder.html">Builder</ulink> object).
 		If left empty, the <emphasis>result==0 and logContainsLine("BUILD SUCCESSFUL")</emphasis>
		value is assumed. When this expression evaluates to true, the build is considered successful.
        </para></listitem>
        </varlistentry>
    </variablelist>
</para>
</section>
<section><title>Configuring Maven2 Builder.</title>
<para>
    <variablelist>
        <varlistentry>
        <term>Name</term>
        <listitem><para>
        Provide a name to identify this builder, this name can be changed later.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Command to run Maven2</term>
        <listitem><para>
        Specify command to run Maven (normally path to maven.bat or maven shell script).
        For example: /path/to/maven.
        String enclosed by ${...} will be interpreted as OGNL expression, and it will be evaluated before execution.
        Root object used for OGNL expression evaluation here is current <ulink url="../javadoc/com/luntsys/luntbuild/builders/Builder.html">Builder</ulink> object.
		</para>
        <note><para>In order to use Luntbuild provided build version number in Maven2, write your pom.xml like the following:
<programlisting>
    <![CDATA[
    <project>
    ...
    <!--Use value of variable "buildVersion" as current version,
    this variable is defined in Luntbuild's Maven
    builder configuration page-->
    <currentVersion>${buildVersion}</currentVersion>
    ...
    </project>
    ]]>
</programlisting>
        </para></note>
        <note><para>Single argument containing spaces should be quoted in order not be interpreted as multiple arguments.</para></note>
        </listitem>
        </varlistentry>
        <varlistentry>
        <term>Directory to run Maven2 in</term>
        <listitem><para>
        Specify the directory to run Maven2 in. If this path is not an absolute path,
        it is assumed to be relative to the project work directory.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Goals to build</term>
        <listitem><para>
        Specify the goals to build. Use space to separate different goals (goal name containing spaces should be quoted
        in order not to be interpreted as multiple goals). You can also use ${...} to pass OGNL variables as the goal name.
        For example you can use ${build.schedule.name} to use different goals for different schedules.
        Root object used for OGNL expression evaluation here is current <ulink url="../javadoc/com/luntsys/luntbuild/builders/Builder.html">Builder</ulink> object.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Build properties</term>
        <listitem><para>
		Define build properties here to pass into the ant build script. For example:
        <simplelist>
        <member>buildVersion=${build.version}</member>
		<member>scheduleName=${build.schedule.name}</member>
        </simplelist>
        </para>
        <para>
		You should set one variable per line. OGNL expression can be used to form the value provided
		it is enclosed by ${...}.
        Root object used for OGNL expression evaluation here is current <ulink url="../javadoc/com/luntsys/luntbuild/builders/Builder.html">Builder</ulink> object.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Environment variables</term>
        <listitem><para>
        Environment variables to set before running this builder. For example:
		<code>MYAPP_HOME=${build.schedule.workingDir}</code>
		<code>SCHEDULE_NAME=${build.schedule.name}</code>
		You should specify one variable per line. OGNL expression can be inserted to form the value,
		provided they are enclosed by ${...}.
        Root object used for OGNL expression evaluation here is current <ulink url="../javadoc/com/luntsys/luntbuild/builders/Builder.html">Builder</ulink> object.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Build success condition</term>
        <listitem><para>
        The build success condition is an OGNL expression used to determine, if the build of the current project
        was successful (root object used for OGNL expression evaluation here is current <ulink url="../javadoc/com/luntsys/luntbuild/builders/Builder.html">Builder</ulink> object).
 		If left empty, the <emphasis>result==0 and logContainsLine("\\[INFO\\].*BUILD SUCCESSFUL.*")</emphasis>
		value is assumed. When this expression evaluates to true, the build is considered successful.
        </para></listitem>
        </varlistentry>
    </variablelist>
</para>
</section>
<section><title>Configuring Rake Builder.</title>
    <para>
        <ulink url="http://rake.rubyforge.org/">Rake</ulink> builder a simple Ruby build program with capabilities similar to make.
    </para>
<para>
    <variablelist>
        <varlistentry>
        <term>Name</term>
        <listitem><para>
        Provide a name to identify this builder, this name can be changed later.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Command to run Rake</term>
        <listitem><para>
        Specify the command to run Rake (normally path to rake.bat).
        For example: /path/to/rake.
        String enclosed by ${...} will be interpreted as OGNL expression, and it will be evaluated before execution.
        Root object used for OGNL expression evaluation here is current <ulink url="../javadoc/com/luntsys/luntbuild/builders/Builder.html">Builder</ulink> object.
        </para>
            <note><para>A single argument that includes spaces should be quoted in order not to be interpreted as multiple arguments.</para></note>
        <para>
        You can modify the command to add Rake command line options and properties.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Build script path</term>
        <listitem><para>
        The path of the Rake build script. If this path is not an absolute path, it is assumed, that it is relative
        to the project work directory.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Build targets</term>
        <listitem><para>
        Specify the target(s) to build. Use space to separate different targets (target name containing spaces should
        be quoted in order not to be interpreted as multiple targets).
		If not specified, the default target in the above Rake build file will be build.
		You can also use OGNL expressions (${...}) to pass variables
        as the target name. For example you can use ${build.schedule.name} to use different targets for different schedules.
        Root object used for OGNL expression evaluation here is current <ulink url="../javadoc/com/luntsys/luntbuild/builders/Builder.html">Builder</ulink> object.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Build properties</term>
        <listitem><para>
		Define build properties here to pass into the Rake build script. For example:
        <simplelist>
        <member>buildVersion=${build.version}</member>
		<member>scheduleName=${build.schedule.name}</member>
        </simplelist>
        </para>
        <para>
		You should set one variable per line. OGNL expression can be used to form the value provided
		it is enclosed by ${...}.
        Root object used for OGNL expression evaluation here is current <ulink url="../javadoc/com/luntsys/luntbuild/builders/Builder.html">Builder</ulink> object.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Environment variables</term>
        <listitem><para>
        Environment variables to set before running this builder. For example:
        <simplelist>
        <member>MYAPP_HOME=${build.schedule.workingDir}</member>
		<member>SCHEDULE_NAME=${build.schedule.name}</member>
        </simplelist>
        </para>
        <para>
		You should specify one variable per line. OGNL expression can be inserted to form the value,
		provided they are enclosed by ${...}.
        Root object used for OGNL expression evaluation here is current <ulink url="../javadoc/com/luntsys/luntbuild/builders/Builder.html">Builder</ulink> object.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>Build success condition</term>
        <listitem><para>
        The build success condition is an OGNL expression used to determine, if the build of the current project
        was successful (root object used for OGNL expression evaluation here is current <ulink url="../javadoc/com/luntsys/luntbuild/builders/Builder.html">Builder</ulink> object).
		If left empty, the <emphasis>result==0 and !logContainsLine("Command failed with status")</emphasis>
		value is assumed. When this expression evaluates to true, the build is considered successful.
		Here are some examples to demonstrate format of this OGNL expression:
        <simplelist>
			<member>
			<emphasis>result==0</emphasis>, here "result" represents return code of Rake execution of the build file.
			</member>
			<member>
			<emphasis>logContainsLine("^ERROR.*")</emphasis>, the expression will be true if the build's build log contains
			a line that matches the regular expression pattern "^ERROR.*".
			Please see <ulink url="http://java.sun.com/j2se/1.4.2/docs/api/java/util/regex/Pattern.html">
			http://java.sun.com/j2se/1.4.2/docs/api/java/util/regex/Pattern.html
			</ulink> for the format of the regular expressions.
			</member>
			<member>
			The above expressions can be prefixed with a '!' character to inverse the value.
			For example, !logContainsLine("^ERROR.*") will be true if the build log does not contain
			a line that matches the specified pattern.
			</member>
			<member>
			The above expressions can be joined into expression with "and", and "or".
			For example, the expression <emphasis>result==0 and !logContainsLine("^ERROR.*")</emphasis>
			will be true if Rake execution of the build returns 0, and the build log does not
			contain any line starting with "ERROR".
			</member>
		</simplelist>
        </para></listitem>
        </varlistentry>
    </variablelist>
</para>
</section>
</chapter>

<chapter id="schedule">
<title>Creating Build Schedule(s) for the Project</title>

&editschedule-section;

<section><title>Schedule Parameters.</title>
<formalpara>
<title>Name</title>
<para>
Provide a name for this schedule. This name will be used to identify this schedule, and cannot be changed later.
Keep in mind that schedule name is used as subdirectory of the project publish directory.
</para>
</formalpara>
<formalpara>
<title>Description</title>
<para>
Provide a description for this schedule.
</para>
</formalpara>
<anchor id="nextBuildVersion"/>
<formalpara>
<title>Next build version</title>
<para>
    Specify the string for the next build version, keep in mind the name will be used
    as a subdirectory in the schedule's publish directory.
    The version string is incremented by Luntbuild as follows:
    <simplelist>
    <member>luntbuild-1.0 will be increased to luntbuild-1.1</member>
    <member>luntbuild-1.2.9 will be increased to luntbuild-1.2.10</member>
    <member>luntbuild-1.5(1000) will be increased to luntbuild-1.5(1001)</member>
    <member></member>
    </simplelist>
    In general, the last number in the "Next build version" will be incremented with every build.
    For example "luntbuild-1.2.0" will increase to "luntbuild-1.2.3" after three builds. However,
    if there are OGNL expressions (encapsulated within ${...}) embedded in, the last number will not be
    increased automatically. Luntbuild will evaluate every embedded OGNL expression to get the
    actual version string for the specific build. When performing the evaluation,
    current <ulink url="../javadoc/com/luntsys/luntbuild/db/Schedule.html">Schedule</ulink> object will
    be used as the OGNL root object. Here are some examples of using OGNL expression to achieve
    various versioning strategy:
    <variablelist>
    <varlistentry>
    <term>Scenario 1:</term>
    <listitem>
        <para>
        <emphasis>Put current date and iteration of this date as the part of the build version.</emphasis>
        </para>
        <para>
        Define "next build version" of every schedule to be:
<programlisting>
    foo-${#currentDay=system.(year+"-"+month+"-"+dayOfMonth), \
    #lastDay=project.var["day"].setValue(#currentDay), \
    #dayIterator=project.var["dayIterator"].intValue, \
    project.var["dayIterator"]. setIntValue(#currentDay==#lastDay?#dayIterator+1:1), \
    #currentDay}.${project.var["dayIterator"]}
</programlisting>
 				The actual version string for a build will include the build date and iterations for that date.
				</para>
			</listitem>
			</varlistentry>
			</variablelist>
			<variablelist>
			<varlistentry>
			<term>Scenario 2:</term>
			<listitem>
                <para>
                <emphasis>
                    "test" and "release" schedule shares and increases the same version string,
                     while "continuous integration" schedule uses another independent version.</emphasis>
                </para>
                <para>
				Both "test" and "release" schedule set "next build version" to be:
<programlisting>
    foo-${project.var["majorVersionPart"]}.\
    ${project.var["minorVersionPart"].increaseAsInt()}
</programlisting>
 				For "continuous integration" schedule, set "next build version" to be:
<programlisting>
    foo-1
</programlisting>
				</para>
			</listitem>
			</varlistentry>
			</variablelist>
			<variablelist>
			<varlistentry>
			<term>Scenario3:</term>
			<listitem>
            <para>
            <emphasis>"release" schedule increases release part of the version, while "nightly" schedule
			increases iteration part of the version. When release part of the version changes, iteration
			part should be reset to 1.
            </emphasis>
            </para>
            <para>
				Define the following variables for the project:
				<simplelist>
					<member>fixPart=foo-1.1</member>
					<member>releasePart=1</member>
					<member>iterationPart=0</member>
				</simplelist>
                </para>
                <para>
				Define "next build version" of "nightly" schedule as:
<programlisting>
${project.var["fixPart"]}.${project.var["releasePart"]} \
build ${project.var["iterationPart"].increaseAsInt()}
</programlisting>
				Define "next build version" of "release" schedule as:
<programlisting>
${project.var["fixPart"]}.${project.var["iterationPart"].setValue(1), \
project.var["releasePart"].(increaseAsInt(), value)}
</programlisting>
				This way, builds in "release" schedule will get versions like: foo-1.1.1, foo-1.1.2, foo-1.1.3, ..., and builds in "nightly" schedule
				will get versions like: foo-1.1.1 build 1, foo-1.1.1 build 2, foo-1.1.1 build3, ...., foo-1.1.2 build 1, foo-1.1.2 build2, ...
				</para>
			</listitem>
			</varlistentry>
			</variablelist>
			<note><para>
                After the evaluation of an OGNL expression, Luntbuild will substitute all "."
                characters in the version string with "_", and all blank characters with "-".
                This string is then used as the label which will be applied
                to source code in the Version Control System for the particular build.
                For example, if the build's version is "v1.0 build256",
                source code for this build will be labeled as "v1_0-build256".
            </para></note>
            <note><para>
                Luntbuild labels the source code based on the version number. If there are multiple projects,
                and/or multiple builds configured in Luntbuild, you should make sure there are no duplicate version
                strings in Luntbuild. For example, if you configure build1 with next build version as "v1.0",
                and configure build2 with next build version as "v1.5" and both of these builds contain
                the same module and they are using the same Version Control System, then after five builds or more,
                version number of build1 will have duplicate version number(s) with the early builds of build2.
                The best practice is to name the version number for each build with project/build prefix,
                such as "luntbuild-dev-0.9.2".
            </para></note>
        </para>
        </formalpara>
        <formalpara>
        <title>Work directory</title>
        <para>
		Work directory for the schedule. Non-absolute path will be assumed to be relative to Luntbuild's top level work directory.
 		If left empty, &lt;global_work_dir&gt;/&lt;project_name&gt; will be assumed, where &lt;global_work_dir&gt; stands for
 		Luntbuild's top level work directory, and &lt;project_name&gt; stands for project name of this schedule. It is possible to use
 		the same work directory for multiple schedules of the same project.
        <link linkend="buildworkdir">See build work directory</link>.
        </para>
        </formalpara>
        <formalpara>
        <title>Trigger type</title>
        <para>
        Select the trigger type for this schedule. Value "manual" means build of this schedule can only be triggered manually.
        Value "simple" can be used to configure a periodic trigger (repeated every N minutes). Value "cron" can be used
        to configure a cron-like trigger. Refer to
        <ulink url="http://www.opensymphony.com/quartz/"><citetitle>http://www.opensymphony.com/quartz/</citetitle></ulink>
        for details about how to configure cron trigger.
        </para>
        </formalpara>
        <formalpara>
        <title>Cron expression</title>
        <para>
        Set the cron expression for this schedule, the format is
        &lt;seconds&gt; &lt;minutes&gt; &lt;hours&gt; &lt;day-of-month&gt; &lt;month&gt; &lt;day-of-week&gt;.
        For example <emphasis>0 1 * * ?</emphasis> means 1:00am every day. For details of the format,
        refer to <ulink url="http://www.opensymphony.com/quartz/wikidocs/TutorialLesson6.html"><citetitle>Cron triggers tutorial</citetitle></ulink>.
        </para>
        </formalpara>
        <formalpara>
        <title>Repeat interval (minutes)</title>
        <para>
        Set the repeat interval for this schedule in minutes.
        </para>
        </formalpara>
		<anchor id="buildNecessaryCondition"/>
        <formalpara>
        <title>Build necessary condition</title>
        <para>
        The "Build necessary condition" is optional.
        If left empty, the "vcsModified or dependencyNewer" value is assumed.
        This property is used by Luntbuild to determine,
        if the current build is necessary when the build strategy of the build schedule is set to
        "build when necessary". The "Build necessary condition" is an OGNL expression.
        When this expression evaluates to true, the build is considered necessary.
        Root object used for OGNL expression evaluation here is current <ulink url="../javadoc/com/luntsys/luntbuild/db/Schedule.html">
        Schedule</ulink> object.
        Here are some examples to show the format of this OGNL expression:
        </para>
        </formalpara>
        <orderedlist numeration="arabic">
            <listitem><para>
                <emphasis>vcsModified</emphasis> - this expression will evaluate to true if the repository
                content of the current build changes
            </para></listitem>
            <listitem><para>
                <emphasis>dependencyNewer</emphasis> - this expression will evaluate to true if new builds are generated in one of
                the dependent schedule
            </para></listitem>
            <listitem><para>
                <emphasis>dependencySuccessful</emphasis> - this expression will evaluate to true if latest builds in all dependent
                schedules are successful
            </para></listitem>
            <listitem><para>
                <emphasis>always</emphasis> - this expression will always evaluate to true to force the build
            </para></listitem>
            <listitem><para>
                <emphasis>never</emphasis> - this expression will always evaluate to false to pause the build
            </para></listitem>
            <listitem><para>
                <emphasis>alwaysIfFailed</emphasis> - this expression will always evaluate to true if last build has failed, and will have the
                value of "vcsModified or dependencyNewer" if last build is successful.
            </para></listitem>
            <listitem><para>
                <emphasis>project["testcvs"].vcsModified</emphasis> - this expression
                will evaluate to true if the repository content of the "testcvs" project
                changes.
            </para></listitem>
            <listitem><para>
                <emphasis>system.execute("/path/to/command.sh") == 0</emphasis> - this expression will evaluate
                to true if the return code of the execution of the specified command is 0.
                </para>
                <note><para>
                    Special characters such as '\', '"', should be escaped with '\', just like in Java strings.
                </para></note>
            </listitem>
        </orderedlist>
        <para>
            The above expressions can be prefixed with '!' to inverse the value,
            for example <emphasis>!modified</emphasis> will be true when there are no modifications
            in the repository of the current project.
        </para>
        <para>
            The above expressions can be joined with "and", and "or". For example, the expression:
            <emphasis>modified or execute("/path/to/command.sh")==0</emphasis> will be true,
            if repository content of the current project changes, or execution of the specified command returns 0.
        </para>
        <para>
            The above expressions can be prefixed with '!' to negate the value,
            for example "!modified" will evaluate to true when there are no modifications
            in the repository of current view.  The above expressions can also be joined with "and", "or".
            For example, the expression
            <emphasis>modified or execute("/path/to/command.sh")==0</emphasis> will evaluate to true
            if the repository content of the current view changes, or execution of the specified command returns 0.
        </para>
        <para>
        Please go to
        <ulink url="http://www.ognl.org"><citetitle>http://www.ognl.org</citetitle></ulink>
        to learn more about general grammar of an OGNL expression.
        </para>
        <formalpara>
        <title>Associated builders</title>
        <para>
        Select builders associated with the current schedule. They will be executed one by one in the selected order.
        </para>
        </formalpara>
        <formalpara>
        <title>Associated post-builders</title>
        <para>
        Select post-builders associated with the current schedule.
        Associated post-builders will be executed after all associated builders, if the condition indicated by "post-build strategy" is met.
        </para>
        </formalpara>
        <formalpara>
        <title>Build type</title>
        <para>
        Select the build type for this schedule, clean build can be more reliable, but can be slower.
        Incremental build can be quicker, but less reliable. We suggest that all important build schedules
        such as nightly or release should use clean build, and very frequent build schedules such as hourly development build,
        can be incremental.
		<note><para>This setting will only take effect when the build is not triggered manually.
		For manual builds, this value will be shown as the default value, when the schedule is being manually build.</para></note>
        </para>
        </formalpara>
        <formalpara>
        <title>Post-build strategy</title>
        <para>
        Select the post-build strategy for this schedule. There are following strategies:
        <variablelist>
	        <varlistentry><term>do not post-build</term>
	        <listitem><para>
	        Do not execute post-build script after the build.
	        </para></listitem></varlistentry>
	        <varlistentry><term>post-build when success</term>
	        <listitem><para>
	        Execute post-build script only when the build was successful.
	        </para></listitem></varlistentry>
	        <varlistentry><term>post-build when failed</term>
	        <listitem><para>
	        Execute post-build script only when the build has failed.
	        </para></listitem></varlistentry>
	        <varlistentry><term>post-build always</term>
	        <listitem><para>
	        Always execute post-build script after the build.
	        </para></listitem></varlistentry>
        </variablelist>
		<note><para>This setting will only take effect when the build is not triggered manually.
		For manual builds, this value will be shown as the default value when the schedule is being build manually.
		</para></note>
        </para>
        </formalpara>
        <formalpara>
        <title>Label strategy</title>
        <para>
        Choose the label strategy for this schedule. There are following strategies:
        <variablelist>
	        <varlistentry><term>label successful builds</term>
	        <listitem><para>
	        Label the repository only for the successful builds.
	        </para></listitem></varlistentry>
	        <varlistentry><term>do not label</term>
	        <listitem><para>
	        Do not label the repository after the build.
	        </para></listitem></varlistentry>
	        <varlistentry><term>label always</term>
	        <listitem><para>
	        Always label the repository after the build.
	        </para></listitem></varlistentry>
        </variablelist>
		<note><para>If the build is not labeled when it is initially built, it will not be rebuildable later.</para></note>
		<note><para>This setting will only take effect when the build is not triggered manually.
		For manual builds, this value will be shown as the default value when the schedule is being build manually.
		</para></note>
        </para>
        </formalpara>
        <formalpara>
        <title>Notify strategy</title>
        <para>
        Choose the notify strategy for this schedule. There are following strategies:
        <variablelist>
	        <varlistentry><term>notify when status changed</term>
	        <listitem><para>
	        Send notification when status of the current build changes against the last build.
	        That is, notification will be sent when the current build succeeds and the last build failed,
	        or the current build fails and the last build succeeded.
	        </para></listitem></varlistentry>
	        <varlistentry><term>notify when failed</term>
	        <listitem><para>
	        Send notification only when the build failed.
	        </para></listitem></varlistentry>
	        <varlistentry><term>notify when success</term>
	        <listitem><para>
	        Send notification only when the build succeeded.
	        </para></listitem></varlistentry>
	        <varlistentry><term>do not notify</term>
	        <listitem><para>
	        Do not send notification after the build.
	        </para></listitem></varlistentry>
	        <varlistentry><term>notify always</term>
	        <listitem><para>
	        Always send notification after the build.
	        </para></listitem></varlistentry>
        </variablelist>
		<note><para>This setting will only take effect when the build is not triggered manually.
		For manual builds, this value will be shown as the default value when the schedule is being build manually.
		</para></note>
        </para>
        </formalpara>
        <anchor id="dependentschedule" />
        <formalpara>
        <title>Dependent schedules</title>
        <para>
        Select the schedules dependent on the current schedule.
        If scheduleA depends on scheduleB, Luntbuild will trigger the build of scheduleB
        before triggering the build in scheduleA. Schedule dependency might be used to define
        project dependencies.
        </para>
        </formalpara>
        <formalpara>
        <title>Dependency triggering strategy</title>
        <para>
        Choose the dependency triggering strategy defining when the current schedule is triggered.
        Following trigger strategies are available:
        <variablelist>
	        <varlistentry><term>schedules this schedule depends on</term>
	        <listitem><para>
	        Trigger schedules the current schedule depends on.
	        Triggering of these schedules will happen before the current schedule is triggered.
	        For example, if the current schedule uses several components built in other schedules,
	        you can use this strategy to make sure that all components used by this schedule are up to date.
	        </para></listitem>
	        </varlistentry>
	        <varlistentry><term>schedules that depends on this schedule</term>
	        <listitem><para>
	        Trigger schedules that depends on the current schedule. Triggering of these schedules will happen
	        after the current schedule is triggered. For example, if the current schedule builds a component
	        that is used by other schedules, you can use this strategy to make sure that
	        all components are up to date before starting the schedules that use this component.
	        </para></listitem>
	        </varlistentry>
	        <varlistentry><term>all dependent schedules</term>
	        <listitem><para>
	        This is the combination of the above two strategies, that is,
	        it triggers the schedules current schedule depends on before actually triggering current schedule,
	        and then it triggers the schedules that depends on the current schedule after triggering the current schedule.
	        </para></listitem>
	        </varlistentry>
	        <varlistentry><term>do not trigger any dependent schedules</term>
	        <listitem><para>
	        Do not trigger neither the schedules the current schedule depends on, nor the schedules that depends on the current schedule.
	        </para></listitem>
	        </varlistentry>
        </variablelist>
		<note><para>
		This setting will only take effect when the build is not triggered manually.
		For manual builds, this value will be shown as the default value when the schedule is being build manually.
		</para></note>
        </para>
        </formalpara>
        <formalpara>
        <title>Build cleanup strategy</title>
        <para>
        Select the build cleanup strategy for this schedule.
        <simplelist>
        <member><emphasis>do not cleanup builds automatically</emphasis>: Builds can be deleted only manually.</member>
        <member><emphasis>keep builds by day</emphasis>: Keep builds for specified number of days.</member>
        <member><emphasis>keep builds by count</emphasis>: Keep specified number of builds.</member>
        </simplelist>
        </para>
        </formalpara>
    <para><note><para>
    If a build for the given project is currently running and a new build for the
    same project starts (either automatically or manually), the build is placed into
    the pending builds queue for the given schedule. A queue of pending builds is displayed on the
    project's Schedule tab page.
    </para></note></para>
</section>
</chapter>

<chapter id="loginmap">
<title>Defining Login Mapping for a Project</title>
<para>
This page shows the mapping from VCS login to the user of the current project.
When Luntbuild retrieves the list of VCS users who have recently checked code into the repository,
it will use this mapping to identify corresponding users and send them notification, if requested.
If the particular VCS login is not mapped, it will automatically map to the user with the same name.
<screenshot>
<screeninfo>Login Mapping Tab</screeninfo>
<mediaobject>
    <imageobject><imagedata fileref="images/login-mapping.jpg" format="JPG" /> </imageobject>
<textobject> <phrase>Login Mapping Tab</phrase> </textobject>
</mediaobject>
</screenshot>
    <variablelist>
        <varlistentry>
        <term>VCS login</term>
        <listitem><para>
        Enter the login name for the Version Control System of the current project.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>User</term>
        <listitem><para>
        Select the user you want to map to the current VCS login.
        </para></listitem>
        </varlistentry>
   	</variablelist>
</para>
</chapter>

<chapter id="antbuild">
<title>Creating/Modifying project's Ant Builder</title>
<para>
As introduced in chapter <link linkend="builders"> </link>, you need to provide a build file, which will be used
by Ant to build your project. This build file is a regular Ant build file. Before your build file is executed,
Luntbuild will pre-define the following properties:
</para>
    <variablelist>
        <varlistentry>
        <term>buildVersion</term>
        <listitem><para>
        This property contains the current version of this build.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>buildDate</term>
        <listitem><para>
        This property contains the build time/date of this build.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>artifactsDir</term>
        <listitem><para>
        This property specifies the artifacts/publishing directory for the current build.
        You should generate all your final build artifacts to directory defined by property "artifactsDir",
        or its subdirectories. Luntbuild only stores the information about this build under this directory.
        You can then export your internal artifacts of this build as follows:
<programlisting>
<![CDATA[
<zip basedir="stage" destfile="${artifactsDir}/${buildVersion}.zip"/>
]]>
</programlisting>
        </para></listitem>
        </varlistentry>
   	</variablelist>
    <para>
	These properties are not only useful when writing the Ant build file, but also useful when you run your application.
	For example, you can show the build version number in your application's About dialog.
	To achieve this, you should write these properties into a file which will be packaged
	in your application's distribution. You can insert the following lines inside a package target of your Ant build file:
<programlisting>
<![CDATA[
<propertyfile file="stage/buildInfo.properties">
<entry key="buildVersion" value="${buildVersion}"/>
<entry key="buildDate" value="${buildDate}"/>
</propertyfile>
]]>
</programlisting>
	Although Luntbuild pre-defines the above properties before it runs Ant,
	you are encouraged to specify the default values for those properties at the beginning of your build file, such as:
<programlisting>
<![CDATA[
<property name="buildVersion" value="luntbuild-1.0"/>
<property name="artifactsDir" value="distribute"/>
<property name="buildDate" value=""/>
]]>
</programlisting>
    </para>
	<note><para>
	You do not need to redirect any generated outputs or errors from the Ant build file to your log file.
	Just let Ant to output them to stdout or stderr. Luntbuild will capture them and write them
	into the prepared log file and publish the log file on the build's artifactsDir.
	</para></note>
</chapter>

<chapter id="mavenbuild">
<title>Creating/Modifying Project's Maven Builder</title>
<para>
As introduced in chapter <link linkend="builders"> </link>, you need to provide Maven a build goal, which will be used
by Maven to build your project. Before your Maven goal is executed,
Luntbuild will pre-define the following properties:
</para>
    <variablelist>
        <varlistentry>
        <term>buildVersion</term>
        <listitem><para>
        This property contains the current version of this build.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>buildDate</term>
        <listitem><para>
        This property contains the build time/date of this build.
        </para></listitem>
        </varlistentry>
        <varlistentry>
        <term>artifactsDir</term>
        <listitem><para>
        This property specifies the artifacts/publishing directory for the current build.
        You should generate all your final build artifacts to directory defined by property "artifactsDir",
        or its subdirectories. Luntbuild only stores the information about this build under this directory.
        You can then export your internal artifacts of this build as follows:
<programlisting>
<![CDATA[
<zip basedir="stage" destfile="${artifactsDir}/${buildVersion}.zip"/>
]]>
</programlisting>
        </para></listitem>
        </varlistentry>
   	</variablelist>
</chapter>

&builds-chapter;

<chapter id="projects">
<title>Snapshot of all Projects</title>
<screenshot>
<screeninfo>Luntbuild Projects Page</screeninfo>
<mediaobject>
    <imageobject><imagedata fileref="images/projects.jpg" format="JPG" /> </imageobject>
<textobject> <phrase>Luntbuild Projects Page</phrase> </textobject>
</mediaobject>
</screenshot>
<para>
This page shows all the projects currently configured in the system.
A project can be created by entering the Version Control System(s) information, Builder(s) information and Schedule(s) information for a project.
A project might be cloned (created a copy of project by clicking on icon
<inlinemediaobject>
    <imageobject><imagedata fileref="images/delete.gif" format="GIF" /> </imageobject>
</inlinemediaobject>.
This is useful for creating projects that are similar to existing projects.
</para>
</chapter>

<chapter id="remote">
<title>Using Luntbuild External API</title>
<para>
Luntbuild provides a suite of remoting API with the following abilities:
<orderedlist numeration="arabic">
    <listitem><para>Create or edit a project.</para></listitem>
    <listitem><para>Trigger a build in any build schedule.</para></listitem>
    <listitem><para>Configure properties of projects, as well as global properties.</para></listitem>
    <listitem><para>Search builds and get a build information such as its artifacts url, etc.</para></listitem>
</orderedlist>
By utilizing the Hessian web service protocol, this API is very easy to use.
Basically two jar files needs to be included in the classpath,
<emphasis>hessian-3.0.8.jar</emphasis> and <emphasis>luntbuild-api.jar</emphasis>.
They can be found in the "remoting" directory. There are also some examples to demonstrate usage of the API.
The remoting API Javadoc is available <ulink url="http://luntbuild.javaforge.com/remote-api/javadoc/index.html">here.</ulink>
Following examples are available:
<orderedlist numeration="arabic">
    <listitem><para><ulink url="http://luntbuild.javaforge.com/remote-api/samples/EditProperties.java.html">Edit Properties</ulink> - This class gives an example of using luntbuild web service API to edit propertie of a project</para></listitem>
    <listitem><para><ulink url="http://luntbuild.javaforge.com/remote-api/samples/SearchBuilds.java.html">Search Builds</ulink> - This class demonstrates search builds in the system, and how to access build information</para></listitem>
    <listitem><para><ulink url="http://luntbuild.javaforge.com/remote-api/samples/TriggerBuild.java.html">Trigger Build</ulink> - This class gives an example of using luntbuild web service API to trigger a build</para></listitem>
    <listitem><para><ulink url="http://luntbuild.javaforge.com/remote-api/samples/LuntbuildConnection.java.html">LuntbuildConnection</ulink>- This class demonstrates access to project, schedule and build data. It shows how to create, edit and delete a project (supported since Luntbuild 1.3).
         This class is part of the Luntclipse, Eclipse plugin for Luntbuild.</para></listitem>
</orderedlist>
The provided TriggerBuild example can be used to implement a real-time Continuous Integration,
that is, whenever a checkin is made into the repository, Luntbuild can trigger immediate build.
We create a sample Cvs repository to show how to do this:
<orderedlist numeration="arabic">
    <listitem><para>
    Create a manually triggered schedule in a project you will use to implement real-time continuous integration.
    To get the build fast, you can configure the build to build incrementally.
    </para></listitem>
    <listitem><para>
    Checkout "loginfo" file under CVSROOT directory of your cvs repository, and append a line like this:
<programlisting>
testcvs cmd /c d:/lunt/cvs/lunt/luntbuild/remoting/samples/trigger_build.bat
</programlisting>
</para>
<para>
    <note><para>Before editing, this file should be checked out first using your cvs client, just like you edit
    other files in your cvs repository.</para></note>
</para>
<para>
	where <emphasis>testcvs</emphasis> should be replaced with the directory path of your Cvs repository.
	All checkins under this path will trigger the trigger_build.bat command.
	The file trigger_build.bat resides in the "remoting/samples" directory.
	Of course, you can copy the related files (the remoting API jar files, the TriggerBuild.class file,
	and the trigger_build.bat file) to any other machine as long as JDK1.4 or higher are installed.
	The path to trigger_build.bat need to be changed to fit your environment.
	Contents of trigger_build.bat should be changed to reflect proper classpaths, your Luntbuild server url,
	your desired project, and build schedule. On Unix platform, you can create the trigger_build.sh script
	easily based on the contents of the file trigger_build.bat.
    </para></listitem>
    <listitem><para>
    Check in the "loginfo" file. From now on, the checkins under your configured path will trigger
    the trigger_build command, which will result in a build you have configured above.
    </para></listitem>
</orderedlist>
</para>
<note><para>
Any other Version Control System that can trigger an external command on checkin can use this method
to implement real-time Continuous Integration.
</para></note>
</chapter>

<chapter id="debug">
<title>Debugging Build Problems</title>
<para>
If you encounter a problem during the build of your project, first check the build log of the failed build.
By default, Luntbuild will only write log of informational, warning, and error messages.
You can edit a project information and set "Log level" property to "verbose".
Luntbuild system log is written to &lt;luntbuild install dir&gt;/logs directory.
The "text" version of the log, "luntbuild_log.txt" retains the information even on Luntbuild
(servlet container) restart. The "html" version of the log, "luntbuild_log.html" contains
only the information of the currently running Luntbuild application.
The log includes information about modification detection, and other information not related to any specific build.
You may need to look at this log to diagnose problems such as scheduled or manual build that did not
execute for unknown reason etc. The most recent log file can be viewed using "system log" link at the top of every page.
However, for older log files, you will need to go to the logs directory.

</para>
</chapter>

<chapter id="security">
<title>Luntbuild Security</title>
<para>
Luntbuild has build-in security for user authentication and authorization handling.
To be independent of the servlet container (application server) Luntbuild is installed in,
all configuration is done inside the Luntbuild application itself.
</para>
<section><title>General security concept overview.</title>
<para>
Only authenticated users are allowed access to Luntbuild.
Luntbuild functions are assigned following basic roles:
<simplelist>
<member>site admin</member>
<member>project admin</member>
<member>project builder</member>
<member>project viewer</member>
<member>role description</member>
</simplelist>
</para>
<para>
<variablelist>
    <varlistentry>
    <term>site admin</term>
    <listitem><para>
    This role is intended to represent the root user. A user with an assigned role site-admin has unrestricted
    access to all of the Luntbuild's functionality. Following are the tasks the site admin is allowed to execute:
	<simplelist>
	<member>user management</member>
	<member>global property management</member>
	<member>create projects</member>
	<member>manage schedules</member>
	<member>assign site-admin role to different users</member>
	<member>assign project admin role to different users</member>
	<member>inspect system log</member>
	</simplelist>
    </para></listitem>
    </varlistentry>
    <varlistentry>
    <term>project admin</term>
    <listitem><para>
    This role covers functionality for project management. Following are the tasks the project admin is allowed to execute:
	<simplelist>
	<member>modify project settings</member>
	<member>manage VCS modules</member>
	<member>manage builds</member>
	<member>assign users to project internal roles</member>
	</simplelist>
    </para></listitem>
    </varlistentry>
    <varlistentry>
    <term>project builder</term>
    <listitem><para>
    This role is restricted to managing the build related tasks.
    Following are the tasks the project builder is allowed to execute:
	<simplelist>
	<member>manually trigger builds</member>
	<member>assign build schedules</member>
	<member>manage build results</member>
	</simplelist>
    </para></listitem>
    </varlistentry>
    <varlistentry>
    <term>project viewer</term>
    <listitem><para>
    This is the most restrictive role. Following are the tasks the project viewer is allowed to execute:
	<simplelist>
	<member>view build results</member>
	<member>view build log</member>
	<member>download build artifacts</member>
	</simplelist>
    </para></listitem>
    </varlistentry>
</variablelist>
</para>
</section>
<section><title>How to configure security for Luntbuild.</title>
<para>
Security for Luntbuild is based on two security providers.
One security provider is configured by modifying the configuration file located
for example in &lt;your app. server&gt;/webapps/luntbuild/WEB-INFO/applicationContext.xml.
For security reasons, you should consider changing the site admin password.
Look for the section <emphasis>inMemoryAuthenticationDAO</emphasis>, and change the default
site admin password to different value:
<programlisting>
<![CDATA[
<bean id="inMemoryAuthenticationDAO" class="net.sf.acegisecurity.providers.dao.memory.InMemoryDaoImpl">
    <property name="userMap">
        <value>
            <!-- this is the build-in site admin user - please change the password for security reasons.
                 However, name of the user, and its role should not be changed! -->
                luntbuild=luntbuild,ROLE_SITE_ADMIN,ROLE_AUTHENTICATED
                anonymous=anonymous,ROLE_AUTHENTICATED
        </value>
    </property>
</bean>
]]>
</programlisting>
</para><para>
<note><para>You can also change the site admin password in the installer.</para></note>
</para><para>
The user anonymous is a user with just minimal view privileges.
</para><para>
    All other users should be created by using Users tab page, see chapter <link linkend="adduser">Adding Luntbuild Users</link>
for details.
</para><para>
    The second security provider is database based and has to be configured in the Project page
to define project related roles. See chapter <link linkend="firstproject">Creating a Project</link> for details.
</para>
</section>
</chapter>

<chapter id="administration">
<title>Data export and import.</title>
<para>
Data of Luntbuild (projects, schedules, etc.) can be exported or imported using "Administration" tab.
</para>
<section><title>Data export.</title>
	<para>
		You can specify the path of the file you want to export to, and click on the "Export" button. Data will be exported.
        The exported data is in XML format, and can be edited (carefully 8-), and you can import the exported data
        to other Luntbuild installations. If relative path is specified,
        the file will be located relative to the Luntbuild installation directory.
        We do recommend to specify the absolute path to the file to be able to locate the file easily.
	</para>
		<note><para>
			File specified here will be created on Luntbuild server, NOT on the machine running web browser.
		</para></note>
		<note><para>
		This operation may take a long time if there are many builds in the system. We strongly suggest to remove
 		non-necessary builds in order to speed up this process and to speed up the import using this export file.
		</para></note>
</section>
<section><title>Data import.</title>
	<para>
		You can specify the path of the file you want to import from, and click on the "Import" button.
        Data will be imported.
	</para>
		<note><para>
		This operation can only be performed on an empty database. It may takes a long time depending on the size
        of the file being imported.
		</para></note>
</section>
<section><title>Data migration by using export and import.</title>
	<para>
	Data migration can be done easily by using export and import. For example, you currently have Luntbuild
    running on HSQLDB database for some time, and you want to switch to MySQL for some reason.
    You can do the following steps to perform the transition:
		<orderedlist>
			<listitem><para>Start Luntbuild running on HSQLDB, and export data to a file, let's say data.xml.</para></listitem>
			<listitem><para>Stop Luntbuild, edit applicationContext.xml file to switch to use MySQL.</para></listitem>
			<listitem><para>Start Luntbuild, and import data.xml into the system.</para></listitem>
			<listitem><para>You are done!</para></listitem>
		</orderedlist>
	</para>
</section>
</chapter>

<appendix id="buildognl">
<title>OGNL Expressions</title>
<para>
Luntbuild Builder and Schedule can use OGNL expressions. Builder evaluates OGNL expressions of its Build Properties
values. Schedule evaluates OGNL expressions of its Next build version. While Builder evaluates OGNL expressions
in context of com.luntsys.luntbuild.builders.Builder class, Schedule evaluates OGNL expressions in context
of com.luntsys.luntbuild.db.Schedule class.
Please see <ulink url="http://luntbuild.javaforge.com/docs/javadoc/index.html">javadoc</ulink> for detail of classes involved
in OGNL expression evaluation.
</para>
<para>
    Following are some examples of available Builder OGNL expressions:
</para>
<variablelist>
    <varlistentry><term>build.version</term>
    <listitem><para>
    Build version
    </para></listitem>
    </varlistentry>
    <varlistentry><term>build.artifactsDir</term>
    <listitem><para>
    Build artifacts directory, subdirectory of the build.publishDir.
    </para></listitem>
    </varlistentry>
    <varlistentry><term>build.publishDir</term>
    <listitem><para>
    Build publish directory.
    </para></listitem>
    </varlistentry>
    <varlistentry><term>build.junitHtmlReportDir</term>
    <listitem><para>
    JUnit tests Html reports directory
    </para></listitem>
    </varlistentry>
    <varlistentry><term>build.schedule.name</term>
    <listitem><para>
    Build schedule name.
    </para></listitem>
    </varlistentry>
    <varlistentry><term>build.schedule.description</term>
    <listitem><para>
    Build schedule description.
    </para></listitem>
    </varlistentry>
    <varlistentry><term>build.schedule.workingDir</term>
    <listitem><para>
    Build schedule work directory.
    </para></listitem>
    </varlistentry>
    <varlistentry><term>build.schedule.vcsModified</term>
    <listitem><para>
    Was VCS modified?
    </para></listitem>
    </varlistentry>
    <varlistentry><term>build.schedule.dependencyNewer</term>
    <listitem><para>
    Is dependent schedule newer?
    </para></listitem>
    </varlistentry>
    <varlistentry><term>build.schedule.project.name</term>
    <listitem><para>
    Build project name.
    </para></listitem>
    </varlistentry>
    <varlistentry><term>build.schedule.project.description</term>
    <listitem><para>
    Build project description.
    </para></listitem>
    </varlistentry>
</variablelist>
<para>
Here are some examples to show the format of the OGNL expressions:
</para>
<orderedlist numeration="arabic">
    <listitem><para>
        <emphasis>vcsModified</emphasis> - this expression will evaluate to true if the repository
        content of the current build changes
    </para></listitem>
    <listitem><para>
        <emphasis>getProject("testcvs").isVcsModifiedSince("11/11/2005")</emphasis> - this expression
        will evaluate to true if the "testcvs" project changed since "11/11/2005". For current project
        the expression would be <emphasis>getProject().isVcsModifiedSince("11/11/2005")</emphasis>.
    </para></listitem>
    <listitem><para>
        <emphasis>getProject("testcvs").isVcsModified()</emphasis> - this expression
        will evaluate to true if the "testcvs" project changed since the last build. For current project
        the expression would be <emphasis>getProject().isVcsModified()</emphasis>.
    </para></listitem>
    <listitem><para>
        <emphasis>ant("/path/to/command.xml", "targetA") == 0</emphasis> - this expression
        will evaluate to true if execution of targetA of ant script file /path/to/command.xml
        returns <emphasis>success</emphasis>.
        </para>
        <note><para>
            Special characters such as '\', '"', should be escaped with '\', just like in Java strings.
            The Ant file path will be assumed relative to current project work directory,
            if it is not an absolute path. If the target is "" or null, the default target will be assumed.
        </para></note>
    </listitem>
    <listitem><para>
        <emphasis>execute("/path/to/command.sh") == 0</emphasis> - this expression will evaluate
        to true if the return code of the execution of the specified command is 0.
        </para>
        <note><para>
            Special characters such as '\', '"', should be escaped with '\', just like in Java strings.
        </para></note>
    </listitem>
</orderedlist>
<para>
	The above expressions can be prefixed with '!' to inverse the value,
	for example <emphasis>!modified</emphasis> will be true when there are no modifications
	in the repository of the current project.
</para>
<para>
	The above expressions can be joined with "and", and "or". For example, the expression:
	<emphasis>modified or execute("/path/to/command.sh")==0</emphasis> will be true,
	if repository content of the current project changes, or execution of the specified command returns 0.
</para>
<para>
    The above expressions can be prefixed with '!' to negate the value,
    for example "!modified" will evaluate to true when there are no modifications
    in the repository of current view.  The above expressions can also be joined with "and", "or".
    For example, the expression
    <emphasis>modified or execute("/path/to/command.sh")==0</emphasis> will evaluate to true
    if the repository content of the current view changes, or execution of the specified command returns 0.
</para>
<para>
    Sometimes in might be handy to have your own class available for OGNL evaluation.
    Luntbuild supports a simple extension mechanism, so that when a JAR containing
    luntbuild_extension.properties is placed into Luntbuild's classpath,
    a class that has been defined in the property file can be accessed trough the
    <emphasis>system</emphasis> object like this:
    <simplelist>
        <member>${system.getExtension("MyExtension").getHelloWorld()}</member>
    </simplelist>
</para>
<para>
    Contents of the property file look like this:
    <simplelist>
        <member>luntbuild.extension.name=MyExtension</member>
        <member>luntbuild.extension.class=org.example.MyExtension</member>
    </simplelist>
    The mechanism is built completely into com.luntsys.luntbuild.utility.OgnlHelper class so,
    that the helper classes are instantiated once and instances stored in a static Hashtable.
    Methods of the extension classes should be made thread safe.
</para>
<para>
Please go to
<ulink url="http://www.ognl.org"><citetitle>http://www.ognl.org</citetitle></ulink>
to learn more about general grammar of an OGNL expression.
</para>
</appendix>
</book>
