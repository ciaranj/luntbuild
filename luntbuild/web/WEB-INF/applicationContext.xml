<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN"
        "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>

	<!-- ========================= GENERAL DEFINITIONS ========================= -->

	<!-- ========================= PERSISTENCE DEFINITIONS ========================= -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName">
			<value>${jdbc.driverClassName}</value>
		</property>
		<property name="url">
    		<value>${jdbc.url}</value>
		</property>
		<property name="username">
			<value>${jdbc.username}</value>
		</property>
		<property name="password">
			<value>${jdbc.password}</value>
		</property>
		<property name="maxWait">
			<value>30000</value>
		</property>
		<property name="maxIdle">
			<value>1</value>
		</property>
		<property name="maxActive">
			<value>1</value>
		</property>
	</bean>

	<bean id="hibernateSessionFactory" class="org.springframework.orm.hibernate.LocalSessionFactoryBean">
		<property name="mappingResources">
			<list>
				<value>com/luntsys/luntbuild/db/luntbuild.hbm.xml</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">false</prop>
				<!--<prop key="hibernate.hbm2ddl.auto">update</prop>-->
			</props>
		</property>
		<property name="dataSource">
			<ref bean="dataSource"/>
		</property>
		<property name="schemaUpdate">
			<value>true</value>
		</property>
	</bean>

	<bean id="hibernateInterceptor" class="org.springframework.orm.hibernate.HibernateInterceptor">
		<property name="sessionFactory">
			<ref bean="hibernateSessionFactory"/>
		</property>
	</bean>

	<bean id="hibernateTransactionManager"
		class="org.springframework.orm.hibernate.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref bean="hibernateSessionFactory"/>
		</property>
	</bean>

	<bean id="hibernateTransactionInterceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager">
			<ref bean="hibernateTransactionManager"/>
		</property>
		<property name="transactionAttributeSource">
			<value>
				com.luntsys.luntbuild.dao.Dao.load*=PROPAGATION_SUPPORTS,readOnly
				com.luntsys.luntbuild.dao.Dao.search*=PROPAGATION_SUPPORTS,readOnly
				com.luntsys.luntbuild.dao.Dao.*=PROPAGATION_REQUIRED
			</value>
		</property>
	</bean>

	<bean id="daoTarget" class="com.luntsys.luntbuild.dao.HibernateDao">
		<property name="sessionFactory">
			<ref bean="hibernateSessionFactory"/>
		</property>
	</bean>

	<bean id="dao" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="proxyInterfaces">
			<value>com.luntsys.luntbuild.dao.Dao</value>
		</property>
		<property name="target">
			<ref local="daoTarget"/>
		</property>
		<property name="interceptorNames">
			<list>
				<value>hibernateInterceptor</value>
				<value>hibernateTransactionInterceptor</value>
				<value>methodSecurityInterceptor</value>
			</list>
		</property>
	</bean>

	<!-- ========================= BUSINESS DEFINITIONS ========================= -->
	<!-- the quartz scheduler service used to get builds scheduling information, and schedule builds -->
	<bean id="schedServiceTarget" class="com.luntsys.luntbuild.services.QuartzService"/>

	<bean id="scheduler" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="proxyInterfaces">
			<value>com.luntsys.luntbuild.services.IScheduler</value>
		</property>
		<property name="target">
			<ref local="schedServiceTarget"/>
		</property>
		<property name="interceptorNames">
			<list>
				<value>methodSecurityInterceptor</value>
			</list>
		</property>
	</bean>

	<!-- the general service provided by luntbuild system, it can be used to provide web services
	for remote systems who wants to interact with this sytem -->
	<bean id="luntbuildService" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="proxyInterfaces">
			<value>com.luntsys.luntbuild.facades.ILuntbuild</value>
		</property>
		<property name="target">
			<ref local="luntbuildServiceTarget"/>
		</property>
		<property name="interceptorNames">
			<list>
				<value>exceptionInterceptor</value>
			</list>
		</property>
	</bean>

	<bean id="luntbuildServiceTarget" class="com.luntsys.luntbuild.services.LuntbuildService"/>

	<bean id="exceptionInterceptor" class="com.luntsys.luntbuild.interceptors.ExceptionInterceptor"/>

	<!-- ACEGI -->

	<!-- =================== SECURITY BEANS YOU SHOULD CHANGE ================== -->

	<!-- If you replace this bean with say JdbcDaoImpl, just ensure your replacement
		 has the same bean id (authenticationDao) -->
	<bean id="inMemoryAuthenticationDAO" class="net.sf.acegisecurity.providers.dao.memory.InMemoryDaoImpl">
		<property name="userMap">
			<value>
				<!-- this is the build-in site admin user - please change the password for security reasons. However, name of the user, and its
				role should not be changed! -->
					luntbuild=@luntbuildPassword@,ROLE_SITE_ADMIN,ROLE_AUTHENTICATED
					dummy=dummy,ROLE_AUTHENTICATED
			</value>
		</property>
	</bean>

	<!--
		Security intercetor for method invocation of database operations
	-->
	<bean id="methodSecurityInterceptor" class="net.sf.acegisecurity.intercept.method.aopalliance.MethodSecurityInterceptor">
		<property name="authenticationManager">
			<ref local="authenticationManager"/>
		</property>
		<property name="accessDecisionManager">
			<ref local="methodAccessDecisionManager"/>
		</property>
		<property name="afterInvocationManager">
			<ref local="afterInvocationManager"/>
		</property>
		<property name="objectDefinitionSource">
			<value>
				com.luntsys.luntbuild.dao.Dao.initialize=ROLE_SITE_ADMIN
            	com.luntsys.luntbuild.dao.Dao.saveProperties=ROLE_SITE_ADMIN
				com.luntsys.luntbuild.dao.Dao.saveProject=ACL_PROJECT_ADMIN
				com.luntsys.luntbuild.dao.Dao.loadProjects=AFTER_ACL_COLLECTION_READ
				com.luntsys.luntbuild.dao.Dao.loadProject=AFTER_ACL_READ
				com.luntsys.luntbuild.dao.Dao.deleteProject=ACL_PROJECT_ADMIN
				com.luntsys.luntbuild.dao.Dao.saveSchedule=ACL_PROJECT_ADMIN
				com.luntsys.luntbuild.dao.Dao.loadSchedules=AFTER_ACL_COLLECTION_READ
				com.luntsys.luntbuild.dao.Dao.loadSchedule=AFTER_ACL_READ
				com.luntsys.luntbuild.dao.Dao.deleteSchedule=ACL_PROJECT_ADMIN
				com.luntsys.luntbuild.dao.Dao.loadVcsLogin=AFTER_ACL_READ
				com.luntsys.luntbuild.dao.Dao.saveVcsLogin=ACL_PROJECT_ADMIN
				com.luntsys.luntbuild.dao.Dao.deleteVcsLogin=ACL_PROJECT_ADMIN
                com.luntsys.luntbuild.dao.Dao.saveBuild=ACL_PROJECT_ADMIN
				com.luntsys.luntbuild.dao.Dao.loadBuild=AFTER_ACL_READ
				com.luntsys.luntbuild.dao.Dao.deleteBuild=ACL_PROJECT_ADMIN
                com.luntsys.luntbuild.dao.Dao.loadLastBuild=AFTER_ACL_READ
				com.luntsys.luntbuild.dao.Dao.loadLastSuccessBuild=AFTER_ACL_READ
				com.luntsys.luntbuild.dao.Dao.loadRunningBuild=AFTER_ACL_READ
				com.luntsys.luntbuild.dao.Dao.reserveBuildsByCount=ACL_PROJECT_ADMIN
				com.luntsys.luntbuild.dao.Dao.removeBuildsBefore=ACL_PROJECT_ADMIN
				com.luntsys.luntbuild.dao.Dao.loadDataCollection12=ROLE_SITE_ADMIN
				com.luntsys.luntbuild.dao.Dao.saveDataCollection12=ROLE_SITE_ADMIN
				com.luntsys.luntbuild.services.IScheduler.scheduleBuild=ACL_PROJECT_BUILD
			</value>
		</property>
	</bean>

	<bean id="filterInvocationInterceptor" class="net.sf.acegisecurity.intercept.web.FilterSecurityInterceptor">
		<property name="authenticationManager">
			<ref local="authenticationManager"/>
		</property>
		<property name="accessDecisionManager">
			<ref local="urlAccessDecisionManager"/>
		</property>
		<property name="objectDefinitionSource">
			<value>
					CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
					\A.*\Z=ROLE_AUTHENTICATED
			</value>
		</property>
	</bean>

	<!-- =================== SECURITY BEANS YOU WILL RARELY (IF EVER) CHANGE ================== -->

	<!-- luntbuild internal RDBMS based authentication DAO -->
	<bean id="luntbuildAuthenticationDAO" class="com.luntsys.luntbuild.security.ApplicationInternalDAO">
	</bean>

	<!-- provider for declared user-roles -->
	<bean id="inMemoryAuthenticationProvider" class="net.sf.acegisecurity.providers.dao.DaoAuthenticationProvider">
		<property name="authenticationDao">
			<ref local="inMemoryAuthenticationDAO"/>
		</property>
	</bean>

	<!-- luntbuild internal provider for RDBMD based user-roles -->
	<bean id="luntbuildAuthenticationProvider" class="net.sf.acegisecurity.providers.dao.DaoAuthenticationProvider">
		<property name="authenticationDao">
			<ref local="luntbuildAuthenticationDAO"/>
		</property>
		<property name="userCache">
			<ref local="userCache"/>
		</property>
	</bean>

	<bean id="userCache" class="net.sf.acegisecurity.providers.dao.cache.EhCacheBasedUserCache">
		<property name="cache">
			<ref local="userCacheBackend"/>
		</property>
	</bean>

	<bean id="userCacheBackend" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
		<property name="cacheManager">
			<ref local="cacheManager"/>
		</property>
		<property name="cacheName">
			<value>userCache</value>
		</property>
	</bean>

	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"/>

	<!-- luntbuild internal provider manager which asks ALL providers instead of just the first -->
	<bean id="authenticationManager" class="com.luntsys.luntbuild.security.AuthenticationProviderManager">
		<property name="providers">
			<list>
				<!-- authentication provider which uses declarative security -->
				<ref local="inMemoryAuthenticationProvider"/>

				<!-- authentication provider which validates users again internal db -->
				<ref local="luntbuildAuthenticationProvider"/>
			</list>
		</property>
	</bean>

	<bean id="roleVoter" class="net.sf.acegisecurity.vote.RoleVoter"/>

	<bean id="methodAccessDecisionManager" class="net.sf.acegisecurity.vote.AffirmativeBased">
		<property name="allowIfAllAbstainDecisions">
			<value>true</value>
		</property>
		<property name="decisionVoters">
			<list>
				<ref local="roleVoter"/>
				<ref local="aclProjectReadVoter"/>
				<ref local="aclProjectBuildVoter"/>
				<ref local="aclProjectAdminVoter"/>
			</list>
		</property>
	</bean>

	<bean id="urlAccessDecisionManager" class="net.sf.acegisecurity.vote.AffirmativeBased">
		<property name="allowIfAllAbstainDecisions">
			<value>false</value>
		</property>
		<property name="decisionVoters">
			<list>
				<ref local="roleVoter"/>
			</list>
		</property>
	</bean>

	<bean id="basicProcessingFilter" class="net.sf.acegisecurity.ui.basicauth.BasicProcessingFilter">
		<property name="authenticationManager">
			<ref local="authenticationManager"/>
		</property>
		<property name="authenticationEntryPoint">
			<ref local="basicProcessingFilterEntryPoint"/>
		</property>
	</bean>

	<bean id="authenticationProcessingFilterEntryPoint" class="net.sf.acegisecurity.ui.webapp.AuthenticationProcessingFilterEntryPoint">
		<property name="loginFormUrl">
			<value>/luntbuild-login.jsp</value>
		</property>
		<property name="forceHttps">
			<value>false</value>
		</property>
	</bean>

	<bean id="basicProcessingFilterEntryPoint" class="com.luntsys.luntbuild.security.BasicProcessingFilterEntryPoint"/>

	<bean id="authenticationProcessingFilter" class="net.sf.acegisecurity.ui.webapp.AuthenticationProcessingFilter">
		<property name="authenticationManager">
			<ref local="authenticationManager"/>
		</property>
		<property name="authenticationFailureUrl">
			<value>/login-error.jsp</value>
		</property>
		<property name="defaultTargetUrl">
			<value>/app</value>
		</property>
		<property name="filterProcessesUrl">
			<value>/j_acegi_security_check</value>
		</property>
	</bean>

	<bean id="securityEnforcementFilter" class="net.sf.acegisecurity.intercept.web.SecurityEnforcementFilter">
		<property name="filterSecurityInterceptor">
			<ref local="filterInvocationInterceptor"/>
		</property>
		<property name="authenticationEntryPoint">
			<ref local="authenticationProcessingFilterEntryPoint"/>
		</property>
	</bean>

	<bean id="httpSessionIntegrationFilter" class="net.sf.acegisecurity.ui.webapp.HttpSessionIntegrationFilter"/>

	<!--
		ACL related beans
	-->
	<!-- ACL permission masks used by this application -->
	<bean id="com.luntsys.luntbuild.security.LuntbuildAclEntry.PROJECT_READ" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
		<property name="staticField">
			<value>com.luntsys.luntbuild.security.LuntbuildAclEntry.PROJECT_READ</value>
		</property>
	</bean>
	<bean id="com.luntsys.luntbuild.security.LuntbuildAclEntry.PROJECT_BUILD" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
		<property name="staticField">
			<value>com.luntsys.luntbuild.security.LuntbuildAclEntry.PROJECT_BUILD</value>
		</property>
	</bean>
	<bean id="com.luntsys.luntbuild.security.LuntbuildAclEntry.PROJECT_ADMIN" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
		<property name="staticField">
			<value>com.luntsys.luntbuild.security.LuntbuildAclEntry.PROJECT_ADMIN</value>
		</property>
	</bean>

	<bean id="aclProjectReadVoter" class="net.sf.acegisecurity.vote.BasicAclEntryVoter">
		<property name="processConfigAttribute">
			<value>ACL_PROJECT_READ</value>
		</property>
		<property name="processDomainObjectClass">
			<value>java.lang.Object</value>
		</property>
		<property name="aclManager">
			<ref local="aclManager"/>
		</property>
		<property name="requirePermission">
			<list>
				<ref local="com.luntsys.luntbuild.security.LuntbuildAclEntry.PROJECT_READ"/>
				<ref local="com.luntsys.luntbuild.security.LuntbuildAclEntry.PROJECT_BUILD"/>
				<ref local="com.luntsys.luntbuild.security.LuntbuildAclEntry.PROJECT_ADMIN"/>
			</list>
		</property>
	</bean>

	<bean id="aclProjectBuildVoter" class="net.sf.acegisecurity.vote.BasicAclEntryVoter">
		<property name="processConfigAttribute">
			<value>ACL_PROJECT_BUILD</value>
		</property>
		<property name="processDomainObjectClass">
			<value>java.lang.Object</value>
		</property>
		<property name="aclManager">
			<ref local="aclManager"/>
		</property>
		<property name="requirePermission">
			<list>
				<ref local="com.luntsys.luntbuild.security.LuntbuildAclEntry.PROJECT_BUILD"/>
				<ref local="com.luntsys.luntbuild.security.LuntbuildAclEntry.PROJECT_ADMIN"/>
			</list>
		</property>
	</bean>

	<bean id="aclProjectAdminVoter" class="net.sf.acegisecurity.vote.BasicAclEntryVoter">
		<property name="processConfigAttribute">
			<value>ACL_PROJECT_ADMIN</value>
		</property>
		<property name="processDomainObjectClass">
			<value>java.lang.Object</value>
		</property>
		<property name="aclManager">
			<ref local="aclManager"/>
		</property>
		<property name="requirePermission">
			<list>
				<ref local="com.luntsys.luntbuild.security.LuntbuildAclEntry.PROJECT_ADMIN"/>
			</list>
		</property>
	</bean>

	<bean id="afterInvocationManager" class="net.sf.acegisecurity.afterinvocation.AfterInvocationProviderManager">
		<property name="providers">
			<list>
				<ref local="afterAclRead"/>
				<ref local="afterAclCollectionRead"/>
			</list>
		</property>
	</bean>

	<!-- Processes AFTER_ACL_COLLECTION_READ configuration settings -->
	<bean id="afterAclCollectionRead" class="net.sf.acegisecurity.afterinvocation.BasicAclEntryAfterInvocationCollectionFilteringProvider">
		<property name="aclManager">
			<ref local="aclManager"/>
		</property>
		<property name="requirePermission">
			<list>
				<ref local="com.luntsys.luntbuild.security.LuntbuildAclEntry.PROJECT_READ"/>
				<ref local="com.luntsys.luntbuild.security.LuntbuildAclEntry.PROJECT_BUILD"/>
				<ref local="com.luntsys.luntbuild.security.LuntbuildAclEntry.PROJECT_ADMIN"/>
			</list>
		</property>
	</bean>

	<!-- Processes AFTER_ACL_READ configuration settings -->
	<bean id="afterAclRead" class="net.sf.acegisecurity.afterinvocation.BasicAclEntryAfterInvocationProvider">
		<property name="aclManager">
			<ref local="aclManager"/>
		</property>
		<property name="requirePermission">
			<list>
				<ref local="com.luntsys.luntbuild.security.LuntbuildAclEntry.PROJECT_READ"/>
				<ref local="com.luntsys.luntbuild.security.LuntbuildAclEntry.PROJECT_BUILD"/>
				<ref local="com.luntsys.luntbuild.security.LuntbuildAclEntry.PROJECT_ADMIN"/>
			</list>
		</property>
	</bean>

	<bean id="aclManager" class="net.sf.acegisecurity.acl.AclProviderManager">
		<property name="providers">
			<list>
				<ref local="luntbuildAclProvider"/>
			</list>
		</property>
	</bean>

	<bean id="luntbuildAclProvider" class="com.luntsys.luntbuild.security.LuntbuildAclProvider"/>

</beans>
