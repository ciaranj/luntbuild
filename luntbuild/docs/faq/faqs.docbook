<?xml version="1.0"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd" >
<book>

<bookinfo>
  <title>LuntBuild - Build Automation and Management FAQ</title>
  <copyright><year>2005</year><holder>Luntbuild</holder></copyright>
</bookinfo>

  <qandaset><title>General FAQ</title>
    <qandaentry>
      <question>
        <para>How to configure several projects to use shared stuffs, for example shared jars?</para>
      </question>
      <answer>
        <orderedlist numeration="arabic">
            <listitem>
                <para>Setup a project, for instance "common", and configure it to checkout your shared jars.
 				And configure builder for this project to publish shared jars to the artifacts directory of this project.
				</para>
            </listitem>
            <listitem>
                <para>Setup other projects, for instance: "projectA" and "projectB". These projects will use shared
 				jars mentioned in step 1. When setting up these projects, you are not need to checkout shared jars.
                </para>
            </listitem>
			<listitem>
				<para>Edit all schedules under projects created in step 2, and configure them to be dependent on
				 related schedules under the "common" project. By doing this, Luntbuild will make sure the "common"
 				 project is up to date before build projectA and projectB.
				</para>
			</listitem>
			<listitem>
				<para>Edit builders of projectA and projectB, pass in publishing directory of the shared jars as build properties:
				<programlisting>	sharedJarsDir=${system.project["common"].schedule[build.schedule.name].lastSuccessBuild.artifactsDir}
				</programlisting>
				</para>
			</listitem>
			<listitem>
				<para>In Ant script of projectA and projectB, access directory ${sharedJarsDir} to use your shared jars.
				</para>
			</listitem>
        </orderedlist>
		  <para>Of course for	shared jars stuff, Maven(http://maven.apache.org) is a more suitable option. Luntbuild can work
 			gracefully with Maven, such as instruct Maven to use Luntbuild generated version numbers, etc.
			</para>
      </answer>
    </qandaentry>
    <qandaentry>
      <question>
        <para>How do you define top location of your Ant target execution?</para>
      </question>
      <answer>
        <para>
        If you are using JNI or your application configuration depends on relative location of the files,
        you might have a problem running the application using Luntbuild. To resolve the issue,
        define environment variable with the top directory of your application,
        and use this variable to define location(s) in the configuration of your application.
        Then define the same environment variable in the appropriate Luntbuild builder.
        </para>
      </answer>    
    </qandaentry>
    <qandaentry>
      <question>
        <para>How do you create a new Project, Build, Schedule ...?</para>
      </question>
      <answer>
        <para>
        To create a new Project, Build, Schedule etc., look in upper right corner, just below
        the Tabs for an icon
        <inlinemediaobject>
            <imageobject><imagedata fileref="images/new.jpg" format="JPG" /> </imageobject>
        </inlinemediaobject>. The icon is quite small and for first time user it is hard to
        find. But as soon as you get used to look for it in all the tabs/pages, the small icon
        makes for nice and compact user interface.
        </para>
      </answer>    
    </qandaentry>
    <qandaentry>
      <question>
        <para>My favorite VCS doesn't work wit Luntbuild?</para>
      </question>
      <answer>
        <para>
            Make sure that external VCS application like cvs or p4 is in your default path
            when you are starting Luntbuild.
        </para>
      </answer>    
    </qandaentry>
    <qandaentry>
      <question>
        <para>How do I find pending builds?</para>
      </question>
      <answer>
        <para>
            To find pending builds, display builds tab and click on schedule. The schedule page will display,
            showing detailed information about that particular schedule, including pending build queue for that schedule.
        </para>
      </answer>    
    </qandaentry>
    <qandaentry>
      <question>
        <para>Can I include date and time in the build version?</para>
      </question>
      <answer>
        <para>
            Yes you can, for example, if you want the version be "foo-yyMMDD_HHMM", you can configure
            "next build version" property of a project as follows:
            <para>"foo-" + shortYear + numericMonth + dayOfMonth + "_" + hour + minute (For luntbuild-1.1.1)</para>
            or
            <para>foo-${shortYear}${numericMonth}${dayOfMonth}_${hour}${minute} (For latest luntbuild code in CVS)</para>
            Where "shortYear", "numericMonth", "dayOfMonth", "hour", "minute" are all OGNL expressions.
            OGNL expressions can be used in build version string, please refer to Luntbuild user manual.
        </para>
      </answer>    
    </qandaentry>
    <qandaentry>
      <question>
        <para>We are using Luntbuild for Continuous Integration and
            we set the continuous integration period to be 60 seconds.
            Sometimes for some reason my version control system goes down, and Luntbuild will send
            build failure notification every 60 seconds, which is a lot of emails.
            Is there any way to let Luntbuild send fail notification mail only once upon such failures?
            And send success notification email again when the version control system comes up.            
        </para>
      </question>
      <answer>
        <para>
            You should consider using "notify when status changed" notification strategy to avoid
            multiple build failure emails in such a case. This notification strategy will only send
            out mail when the current build is successful and the last build has failed,
            or the current build has failed and the last build is successful.
        </para>
      </answer>    
    </qandaentry>
    <qandaentry>
      <question>
        <para>What is the initial username and password after Luntbuild installation?</para>
      </question>
      <answer>
        <para>
            The initial site admin username/password is luntbuild/luntbuild.
            It is stored at &lt;tomcat&gt;/webapps/luntbuild/WEB-INF/applicationContext.xml.
            The user manual explains this in more detail.
        </para>
      </answer>    
    </qandaentry>
    
    <qandaentry>
      <question>
        <para>I'm surprised to find that only recent VCS committers will get build result notifications.
             Is there any way to send build notification email to some designated person besides the developers?            
        </para>
      </question>
      <answer>
        <para>
            By default Luntbuild only sends notifications to recent VCS committers.
            However you can configure the "notification users" property in projects/basic tab to add
            users to receive build result notifications.            
        </para>
      </answer>    
    </qandaentry>
    <qandaentry>
      <question>
        <para>
            We are using Ant builder to run our build on Windows platform,
            and we set the "build success condition" to be "result==0". But Luntbuild still signals
            the build success while actually the Ant builder fails. What gives?
        </para>
      </question>
      <answer>
        <para>
            Luntbuild's Ant builder calls /path/to/ant.bat(provided by ant distribution) to perform build
            on Windows platform. The ant.bat will internally call java.exe to do its job.
            When there is a build error, java.exe will fail.
            However, the error code will not get propagated to the caller of ant.bat(Luntbuild in this case).
            This is an known behavior of Windows batch file. To overcome that, you can set
            "build success condition" as:
            <para>result==0 and logContainsLine("BUILD SUCCESSFUL")</para>
        </para>
      </answer>    
    </qandaentry>
  </qandaset>
  
  
  <qandaset><title>Application Server FAQ</title>
    <qandaentry>
      <question>
        <para>
            I am running Luntbuild on tomcat4.1.31 on Linux.
            But after installing Luntbuild and accessing it in the browser, I get the following stack trace
            starting with:
            <simplelist>            
            <member>* com.luntsys.luntbuild.utility.Luntbuild.getDao(Luntbuild.java:118)</member>
            <member>* com.luntsys.luntbuild.web.BuildsTab.loadData(BuildsTab.java:63)</member>
            <member>* com.luntsys.luntbuild.web.Home.activateExternalPage(Home.java:67)</member>
            </simplelist>
            What's wrong?     
        </para>
      </question>
      <answer>
        <para>
Full Stack Trace:
<programlisting>
* com.luntsys.luntbuild.utility.Luntbuild.getDao(Luntbuild.java:118)
* com.luntsys.luntbuild.web.BuildsTab.loadData(BuildsTab.java:63)
* com.luntsys.luntbuild.web.Home.activateExternalPage(Home.java:67)
* com.luntsys.luntbuild.web.Home.pageActivated(Home.java:99)
* org.apache.tapestry.engine.HomeService.service(HomeService.java:64)
* org.apache.tapestry.engine.AbstractEngine.service(AbstractEngine.java:872)
* org.apache.tapestry.ApplicationServlet.doService(ApplicationServlet.java:197)
* org.apache.tapestry.ApplicationServlet.doGet(ApplicationServlet.java:158)
* javax.servlet.http.HttpServlet.service(HttpServlet.java:696)
* javax.servlet.http.HttpServlet.service(HttpServlet.java:809)
* org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:200)
* org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:146)
* org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:209)
* org.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNext(StandardPipeline.java:596)
* org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:433)
* org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:948)
* org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:144)
* org.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNext(StandardPipeline.java:596)
* org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:433)
* org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:948)
* org.apache.catalina.core.StandardContext.invoke(StandardContext.java:2358)
* org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:133)
* org.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNext(StandardPipeline.java:596)
* org.apache.catalina.valves.ErrorDispatcherValve.invoke(ErrorDispatcherValve.java:118)
* org.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNext(StandardPipeline.java:594)
* org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:116)
* org.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNext(StandardPipeline.java:594)
* org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:433)
* org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:948)
* org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:127)
* org.apache.catalina.core.StandardPipeline$StandardPipelineValveContext.invokeNext(StandardPipeline.java:596)
* org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:433)
* org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:948)
* org.apache.coyote.tomcat4.CoyoteAdapter.service(CoyoteAdapter.java:152)
* org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:799)
* org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnection(Http11Protocol.java:705)
* org.apache.tomcat.util.net.TcpWorkerThread.runIt(PoolTcpEndpoint.java:577)
* org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:683)
* java.lang.Thread.run(Thread.java:534)
</programlisting>

Check your web.xml file and verify that "installDir" parameter is correctly pointing to the Luntbuild
installation directory (not the same location as the luntbuild webapp directory under Tomcat).
The Luntbuild installation directory is the directory you extract luntbuild zip file to,
and there are several subdirectories inside it, such as db, logs, work, publish, etc.
        </para>
      </answer>    
    </qandaentry>
    <qandaentry>
      <question>
        <para>
            After installation, Luntbuild gives me the "HTTP Status 500" error page
            with message "The server encountered an internal error () that prevented it from fulfilling this request."
            when I point my browser to Luntbuild. What's wrong?
        </para>
      </question>
      <answer>
        <para>
        <programlisting>
HTTP Status 500 -

type Exception report

message

description The server encountered an internal error () that prevented it from fulfilling this request.

exception

javax.servlet.ServletException: Servlet.init() for servlet luntbuild threw exception
org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:118)
org.apache.coyote.tomcat5.CoyoteAdapter.service(CoyoteAdapter.java:160)
org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:799)
org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnection(Http11Protocol.java:705)
org.apache.tomcat.util.net.TcpWorkerThread.runIt(PoolTcpEndpoint.java:577)
org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:683)
java.lang.Thread.run(Thread.java:567)

root cause

org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'hibernateSessionFactory' defined in resource [/WEB-INF/applicationContext.xml] of ServletContext: Initialization of bean failed; nested exception is org.springframework.jdbc.UncategorizedSQLException: (HibernateAccessor): encountered SQLException [Cannot create PoolableConnectionFactory]; nested exception is org.apache.commons.dbcp.SQLNestedException: Cannot create PoolableConnectionFactory
org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:210)
org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:159)
org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:172)
org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:265)
org.springframework.web.context.support.XmlWebApplicationContext.refresh(XmlWebApplicationContext.java:125)
com.luntsys.luntbuild.LuntBuildServlet.init(LuntBuildServlet.java:103)
javax.servlet.GenericServlet.init(GenericServlet.java:211)
org.apache.tapestry.ApplicationServlet.init(Unknown Source)
org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:118)
org.apache.coyote.tomcat5.CoyoteAdapter.service(CoyoteAdapter.java:160)
org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:799)
org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.processConnection(Http11Protocol.java:705)
org.apache.tomcat.util.net.TcpWorkerThread.runIt(PoolTcpEndpoint.java:577)
org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:683)
java.lang.Thread.run(Thread.java:567)

<note>The full stack trace of the root cause is available in the Apache Tomcat/5.0.28 logs.</note>

        </programlisting>        
        This looks like permission issue. Does the user owning tomcat process has read/write access
        to the Luntbuild installation directory(the directory you extract luntbuild zip package to)?
        </para>
      </answer>    
    </qandaentry>
  </qandaset>
  
  
  <qandaset><title>Cvs FAQ</title>
    <qandaentry>
      <question>
        <para>
            I use luntbuild to perform build for my cvs repository.
            However the error "2004-10-14 08:41:15,657 [Thread-41] WARN com.luntsys.luntbuild.build.BuildGenerator - [log]log: invalid option -- S"
            occurs after I issue the build command.
            What's wrong?
        </para>
      </question>
      <answer>
        <para>
        <programlisting>        
INFO com.luntsys.luntbuild.build.BuildGenerator - [log]Execute command: Executing 'cvs' with arguments:
'-d:pserver:dsantiag@maqueta1.jif.es:/web/CVS/CVSDATA'
'-q'
'log'
'-S'
'-N'
'-d'
'>2004-10-14 08:30:00'
'-b'

The ' characters around the executable and arguments are
not part of the command.
2004-10-14 08:41:15,657 [Thread-41] WARN com.luntsys.luntbuild.build.BuildGenerator - [log]log: invalid option -- S
2004-10-14 08:41:15,657 [Thread-41] WARN com.luntsys.luntbuild.build.BuildGenerator - [log]Usage: cvs log [-lRhtNb] [-r[revisions]] [-d dates] [-s states]
2004-10-14 08:41:15,657 [Thread-41] WARN com.luntsys.luntbuild.build.BuildGenerator - [log] [-w[logins]] [files...]
2004-10-14 08:41:15,657 [Thread-41] WARN com.luntsys.luntbuild.build.BuildGenerator - [log] -l Local directory only, no recursion.
2004-10-14 08:41:15,657 [Thread-41] WARN com.luntsys.luntbuild.build.BuildGenerator - [log] -R Only print name of RCS file.
2004-10-14 08:41:15,657 [Thread-41] WARN com.luntsys.luntbuild.build.BuildGenerator - [log] -h Only print header.
2004-10-14 08:41:15,673 [Thread-41] WARN com.luntsys.luntbuild.build.BuildGenerator - [log] -t Only print header and descriptive text.
2004-10-14 08:41:15,673 [Thread-41] WARN com.luntsys.luntbuild.build.BuildGenerator - [log] -N Do not list tags.
2004-10-14 08:41:15,673 [Thread-41] WARN com.luntsys.luntbuild.build.BuildGenerator - [log] -b Only list revisions on the default branch.
2004-10-14 08:41:15,673 [Thread-41] WARN com.luntsys.luntbuild.build.BuildGenerator - [log] -r[revisions] Specify revision(s)s to list.
2004-10-14 08:41:15,673 [Thread-41] WARN com.luntsys.luntbuild.build.BuildGenerator - [log] -d dates Specify dates (D1&lt;D2 for range, D for latest before).
2004-10-14 08:41:15,673 [Thread-41] WARN com.luntsys.luntbuild.build.BuildGenerator - [log] -s states Only list revisions with specified states.
2004-10-14 08:41:15,673 [Thread-41] WARN com.luntsys.luntbuild.build.BuildGenerator - [log] -w[logins] Only list revisions checked in by specified logins.
2004-10-14 08:41:15,689 [Thread-41] WARN com.luntsys.luntbuild.build.BuildGenerator - [log](Specify the --help global option for a list of other help options)
2004-10-14 08:41:15,689 [DefaultQuartzScheduler_Worker-6] ERROR com.luntsys.luntbuild.build.BuildGenerator - Exception during job execution
ERROR: Failed executing command: Executing 'cvs' with arguments:
'-d:pserver:dsantiag@maqueta1.jif.es:/web/CVS/CVSDATA'
'-q'
'log'
'-S'
'-N'
'-d'
'>2004-10-14 08:30:00'
'-b'

The ' characters around the executable and arguments are
not part of the command.
, returned code: 1
at com.luntsys.luntbuild.utility.MyExecTask.execute(MyExecTask.java:132)
at com.luntsys.luntbuild.vcs.CvsAdaptor.getRevisionsSince(CvsAdaptor.java:321)
at com.luntsys.luntbuild.build.BuildGenerator.getRevisionsSince(BuildGenerator.java:308)
at com.luntsys.luntbuild.build.BuildGenerator.execute(BuildGenerator.java:201)
at org.quartz.core.JobRunShell.run(JobRunShell.java:191)
at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:516)
        </programlisting>
        The reason is, that the cvs version you are using is too old and does NOT support "-S" option.
        However, you can turn off "-S" option at cvs adaptor editing page, just set "disable -S option" property to "yes".
        </para>
      </answer>    
    </qandaentry>

    <qandaentry>
      <question>
        <para>
            I have a problem using Luntbuild with cygwin cvs, the automatically generated .cvspass file
            seems invalid to cygwin cvs. Is there any workaround?            
        </para>
      </question>
      <answer>
        <para>
            For cygwin cvs, please goto cvs adaptor editing page, set "use cygwin cvs?" property to "yes".
        </para>
      </answer>    
    </qandaentry>
  </qandaset>
  
  
  <qandaset><title>Perforce FAQ</title>
    <qandaentry>
      <question>
        <para>How do you set up Perforce client spec if multiple users use Luntbuild?</para>
      </question>
      <answer>
        <para>
            <itemizedlist>
            <para>I set up Luntbuild work directory to /opt/builds.</para>
            <para>I name my project mybuilds-myproject.</para>
            <para>I specify client path in p4 clientspec to //myspec/..., 
            and I got build going in //opt/builds/mybuilds-myproject.</para>
            <para>I set up build file to build.xml.</para>
            </itemizedlist>
        </para>
      </answer>    
    </qandaentry>
    <qandaentry>
      <question>
        <para>How do exclude files and directories in Perforce VCS using Luntbuild modules?</para>
      </question>
      <answer>
        <para>
        To exclude files or directories, create a separate module for each exclussion and precede
        the Depot path property with a minus (-) sign, as follows: 
        <programlisting>        
        Depot path:  -//depot.side
        Client path: //client.side 
        </programlisting>        
        </para>
      </answer>    
    </qandaentry>
  </qandaset>
  
  
  <qandaset><title>Visual Sourcesafe FAQ</title>
    <qandaentry>
      <question>
        <para>What Date format should I use with the Visual Sourcesafe Adapter in the English speaking countries
        with different date format like UK, Australia, Canada?</para>
      </question>
      <answer>
        <para>
        The default Datetime value is suitable for English language operating systems using US locale.
        For other English speaking countries with different date format like UK, Australia, and Canada
        the Visual Sourcesafe Date format to use (assuming you're using the appropriate
        locale setup as Visual Sourcesafe honors the local locale settings) should be as follows:
        <programlisting>        
		'd/M/yy;H:mm'
        </programlisting>        
        </para>
      </answer>    
    </qandaentry>
  </qandaset>

  
  <qandaset><title>Development FAQ</title>
      <qandaentry>
      <question>
        <para>Building Luntbuild in Eclipse</para>
      </question>
      <answer>
        <para>
        The one problem I had with building Luntbuild source code using default Eclipse build
        is that starteam.jar is optional. This is checked in Ant &lt;luntbuild&gt;/build/build.xml and
        src. files that use StarTeam VCS are build conditionally based on the presence of starteam.jar. 
        I have started building Luntbuild from cmd. line using ant, that works.  
        But doing it directly from Eclipse is more convenient, so I use External Tools,
        I create Ant Build configuration, point it to &lt;luntbuild&gt;/build/build.xml and
        select clean package targets (make sure to put them in the right order).
        Then I use this External Tools target to re-build Luntbuild. 
        If you want to use Eclipse default build facilities for Luntbuild project, here is another, possibly
        better option:
        <itemizedlist>
        <para>Go to Luntbuild Eclipse project Properties</para>
        <para>Select Builders</para>
        <para>Create a new Builder (name it for example Luntbuild Builder)</para>
        <para>Select Ant Build, define workspace location, base directory, pick target "package"</para>
        <para>Save Luntbuild Builder, unselect Java Builder, and move Luntbuild Builder up</para>
        </itemizedlist>
        Now you should be able to run Luntbuild build using std. Eclipse build facilities.
        Output from the is displayed in Console view.
        </para>
      </answer>    
    </qandaentry>
  </qandaset>

</book>
